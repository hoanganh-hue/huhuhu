#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Module 7 - Integration v·ªõi modules hi·ªán c√≥
"""

import asyncio
import sys
import os
import json
from datetime import datetime
from typing import List, Dict, Any

# Th√™m path ƒë·ªÉ import module
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from modules.core.module_7_wrapper import Module7Wrapper, check_cccd_with_proxy

class Module7IntegrationTester:
    """Class test Module 7 - Integration"""
    
    def __init__(self):
        self.test_cccds = [
            "001087016369",
            "001184032114", 
            "001098021288",
            "001094001628",
            "036092002342"
        ]
        
        self.results = []
        self.summary = {
            "total_requests": 0,
            "successful": 0,
            "not_found": 0,
            "blocked": 0,
            "errors": 0,
            "processing_time": 0.0
        }
    
    async def test_integration_with_existing_modules(self):
        """Test integration v·ªõi modules hi·ªán c√≥"""
        print("üß™ TEST MODULE 7 - INTEGRATION")
        print("üéØ Test integration v·ªõi modules hi·ªán c√≥")
        print("=" * 80)
        print(f"üìã S·ªë l∆∞·ª£ng CCCD test: {len(self.test_cccds)}")
        print(f"üìÖ Th·ªùi gian b·∫Øt ƒë·∫ßu: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        start_time = asyncio.get_event_loop().time()
        
        # Test v·ªõi Module7Wrapper
        config = {
            'timeout': 30,
            'max_retries': 2,
            'proxy_strategy': 'random',
            'enable_dynamic_data': True
        }
        
        async with Module7Wrapper(config) as wrapper:
            
            for i, cccd in enumerate(self.test_cccds, 1):
                print(f"\nüìã [{i}/{len(self.test_cccds)}] Test CCCD: {cccd}")
                print("-" * 60)
                
                try:
                    # Test v·ªõi wrapper
                    result = await wrapper.check_cccd_with_proxy(cccd)
                    
                    self.results.append({
                        "cccd": cccd,
                        "method": "module_7_wrapper",
                        "result": result
                    })
                    
                    # In k·∫øt qu·∫£
                    self.print_result_details(result, i)
                    
                    # C·∫≠p nh·∫≠t summary
                    self.update_summary(result)
                    
                    # Delay gi·ªØa c√°c request
                    if i < len(self.test_cccds):
                        print("‚è≥ Ch·ªù 2s tr∆∞·ªõc khi test CCCD ti·∫øp theo...")
                        await asyncio.sleep(2.0)
                
                except Exception as e:
                    print(f"‚ùå L·ªói khi test CCCD {cccd}: {str(e)}")
                    self.results.append({
                        "cccd": cccd,
                        "method": "module_7_wrapper",
                        "result": {
                            "status": "error",
                            "error": str(e)
                        }
                    })
                    self.summary["errors"] += 1
        
        # T√≠nh th·ªùi gian x·ª≠ l√Ω t·ªïng
        self.summary["processing_time"] = asyncio.get_event_loop().time() - start_time
        
        # In t·ªïng k·∫øt
        self.print_summary()
        
        # L∆∞u k·∫øt qu·∫£
        self.save_results()
        
        return {
            "results": self.results,
            "summary": self.summary
        }
    
    async def test_standalone_functions(self):
        """Test standalone functions"""
        print("\nüß™ TEST STANDALONE FUNCTIONS")
        print("=" * 80)
        
        config = {
            'timeout': 30,
            'max_retries': 2,
            'proxy_strategy': 'random',
            'enable_dynamic_data': True
        }
        
        standalone_results = []
        
        for i, cccd in enumerate(self.test_cccds[:2], 1):  # Test 2 CCCD ƒë·∫ßu ti√™n
            print(f"\nüìã [{i}/2] Test standalone function: {cccd}")
            print("-" * 40)
            
            try:
                # Test v·ªõi standalone function
                result = await check_cccd_with_proxy(cccd, config)
                standalone_results.append(result)
                
                # In k·∫øt qu·∫£
                print(f"üîç K·∫øt qu·∫£ standalone #{i}:")
                print(f"   CCCD: {result.get('cccd', 'N/A')}")
                print(f"   Tr·∫°ng th√°i: {result.get('status', 'N/A')}")
                print(f"   Th√¥ng b√°o: {result.get('message', 'N/A')}")
                print(f"   Proxy Used: {result.get('proxy_used', 'N/A')}")
                print(f"   Processing Time: {result.get('processing_time', 0):.2f}s")
                
                # Delay
                if i < 2:
                    print("‚è≥ Ch·ªù 2s...")
                    await asyncio.sleep(2.0)
            
            except Exception as e:
                print(f"‚ùå L·ªói: {str(e)}")
                standalone_results.append({
                    "cccd": cccd,
                    "status": "error",
                    "error": str(e)
                })
        
        return standalone_results
    
    async def test_comparison_with_old_modules(self):
        """Test so s√°nh v·ªõi modules c≈©"""
        print("\nüß™ TEST COMPARISON WITH OLD MODULES")
        print("=" * 80)
        
        # Test v·ªõi CCCD ƒë·∫ßu ti√™n
        test_cccd = self.test_cccds[0]
        print(f"üìã Test CCCD: {test_cccd}")
        print("-" * 40)
        
        # Test Module 7 (m·ªõi)
        print("üîÑ Test Module 7 (m·ªõi)...")
        try:
            config = {
                'timeout': 30,
                'max_retries': 2,
                'proxy_strategy': 'random',
                'enable_dynamic_data': True
            }
            
            async with Module7Wrapper(config) as wrapper:
                module7_result = await wrapper.check_cccd_with_proxy(test_cccd)
            
            print(f"‚úÖ Module 7 Result:")
            print(f"   Status: {module7_result.get('status', 'N/A')}")
            print(f"   Message: {module7_result.get('message', 'N/A')}")
            print(f"   Proxy Used: {module7_result.get('proxy_used', 'N/A')}")
            print(f"   Processing Time: {module7_result.get('processing_time', 0):.2f}s")
            
        except Exception as e:
            print(f"‚ùå Module 7 Error: {str(e)}")
            module7_result = {"status": "error", "error": str(e)}
        
        # Test Module 2 (c≈©) - n·∫øu c√≥
        print("\nüîÑ Test Module 2 (c≈©)...")
        try:
            # Import module c≈© n·∫øu c√≥
            from modules.core.module_2_check_cccd_standardized import Module2CheckCCCDStandardized
            
            old_config = {
                'timeout': 30,
                'max_retries': 3,
                'output_file': 'comparison_test_output.txt'
            }
            
            old_module = Module2CheckCCCDStandardized(old_config)
            old_result = old_module.check_cccd(test_cccd)
            
            print(f"‚úÖ Module 2 Result:")
            print(f"   Status: {old_result.status}")
            print(f"   Message: {old_result.message}")
            print(f"   Processing Time: {old_result.processing_time:.2f}s")
            print(f"   Retry Count: {old_result.retry_count}")
            
        except Exception as e:
            print(f"‚ùå Module 2 Error: {str(e)}")
            old_result = {"status": "error", "error": str(e)}
        
        # So s√°nh k·∫øt qu·∫£
        print(f"\nüìä SO S√ÅNH K·∫æT QU·∫¢:")
        print(f"   Module 7 (m·ªõi): {module7_result.get('status', 'N/A')}")
        print(f"   Module 2 (c≈©): {old_result.status if hasattr(old_result, 'status') else old_result.get('status', 'N/A')}")
        
        if module7_result.get('status') == old_result.status if hasattr(old_result, 'status') else old_result.get('status'):
            print("‚úÖ K·∫øt qu·∫£ gi·ªëng nhau")
        else:
            print("‚ö†Ô∏è K·∫øt qu·∫£ kh√°c nhau")
        
        return {
            "module7_result": module7_result,
            "old_result": old_result
        }
    
    def print_result_details(self, result, index: int):
        """In chi ti·∫øt k·∫øt qu·∫£"""
        print(f"üîç K·∫øt qu·∫£ test #{index}:")
        print(f"   CCCD: {result.get('cccd', 'N/A')}")
        print(f"   Tr·∫°ng th√°i: {result.get('status', 'N/A')}")
        print(f"   Th√¥ng b√°o: {result.get('message', 'N/A')}")
        print(f"   Proxy Used: {result.get('proxy_used', 'N/A')}")
        print(f"   Processing Time: {result.get('processing_time', 0):.2f}s")
        print(f"   Retry Count: {result.get('retry_count', 0)}")
        
        if result.get('profiles'):
            print(f"   üìä S·ªë profiles: {len(result['profiles'])}")
            for j, profile in enumerate(result['profiles'], 1):
                print(f"   ‚îî‚îÄ Profile {j}: {profile.get('name', 'N/A')}")
        
        if result.get('error_details'):
            print(f"   Error Details: {result['error_details']}")
    
    def update_summary(self, result):
        """C·∫≠p nh·∫≠t summary"""
        status = result.get('status', 'error')
        
        if status == 'found':
            self.summary["successful"] += 1
        elif status == 'not_found':
            self.summary["not_found"] += 1
        elif status == 'blocked':
            self.summary["blocked"] += 1
        else:
            self.summary["errors"] += 1
        
        self.summary["total_requests"] += 1
    
    def print_summary(self):
        """In t·ªïng k·∫øt"""
        print("\n" + "=" * 80)
        print("üìä T·ªîNG K·∫æT TEST MODULE 7 - INTEGRATION")
        print("=" * 80)
        
        print(f"üìã T·ªïng s·ªë requests: {self.summary['total_requests']}")
        print(f"‚úÖ Th√†nh c√¥ng: {self.summary['successful']}")
        print(f"‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y: {self.summary['not_found']}")
        print(f"üö´ B·ªã ch·∫∑n: {self.summary['blocked']}")
        print(f"‚ùå L·ªói: {self.summary['errors']}")
        print(f"‚è∞ Th·ªùi gian x·ª≠ l√Ω t·ªïng: {self.summary['processing_time']:.2f}s")
        
        # T√≠nh t·ª∑ l·ªá th√†nh c√¥ng
        success_rate = (self.summary['successful'] / max(1, self.summary['total_requests'])) * 100
        print(f"üéØ T·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print("‚úÖ K·∫æT QU·∫¢: Xu·∫•t s·∫Øc - Module 7 Integration ho·∫°t ƒë·ªông t·ªët")
        elif success_rate >= 60:
            print("‚ö†Ô∏è K·∫æT QU·∫¢: T·ªët - Module 7 Integration ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh")
        elif success_rate >= 40:
            print("‚ö†Ô∏è K·∫æT QU·∫¢: Trung b√¨nh - C·∫ßn c·∫£i thi·ªán")
        else:
            print("‚ùå K·∫æT QU·∫¢: K√©m - C·∫ßn s·ª≠a l·ªói")
        
        print("=" * 80)
    
    def save_results(self):
        """L∆∞u k·∫øt qu·∫£"""
        try:
            results_data = {
                "test_info": {
                    "test_date": datetime.now().isoformat(),
                    "module": "module_7_integration",
                    "total_cccds": len(self.test_cccds),
                    "test_cccds": self.test_cccds
                },
                "summary": self.summary,
                "results": self.results
            }
            
            with open('module_7_integration_results.json', 'w', encoding='utf-8') as f:
                json.dump(results_data, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: module_7_integration_results.json")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u k·∫øt qu·∫£: {str(e)}")

async def main():
    """H√†m ch√≠nh"""
    print("üß™ TEST MODULE 7 - INTEGRATION")
    print("üéØ Test integration v·ªõi modules hi·ªán c√≥")
    print("=" * 80)
    
    tester = Module7IntegrationTester()
    
    # Test 1: Integration v·ªõi existing modules
    await tester.test_integration_with_existing_modules()
    
    # Test 2: Standalone functions
    await tester.test_standalone_functions()
    
    # Test 3: Comparison v·ªõi old modules
    await tester.test_comparison_with_old_modules()
    
    # K·∫øt lu·∫≠n
    success_rate = (tester.summary['successful'] / max(1, tester.summary['total_requests'])) * 100
    
    print(f"\nüéâ K·∫æT LU·∫¨N INTEGRATION:")
    if success_rate >= 80:
        print("‚úÖ Module 7 Integration ho·∫°t ƒë·ªông xu·∫•t s·∫Øc!")
        print("‚úÖ T√≠ch h·ª£p ho√†n h·∫£o v·ªõi modules hi·ªán c√≥")
    elif success_rate >= 60:
        print("‚ö†Ô∏è Module 7 Integration ho·∫°t ƒë·ªông t·ªët")
        print("‚ö†Ô∏è T√≠ch h·ª£p ·ªïn ƒë·ªãnh v·ªõi modules hi·ªán c√≥")
    elif success_rate >= 40:
        print("‚ö†Ô∏è Module 7 Integration ho·∫°t ƒë·ªông trung b√¨nh")
        print("‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán t√≠ch h·ª£p")
    else:
        print("‚ùå Module 7 Integration c·∫ßn ƒë∆∞·ª£c c·∫£i thi·ªán")
    
    print(f"üìä T·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%")
    print(f"üìã T·ªïng s·ªë requests: {tester.summary['total_requests']}")
    print(f"‚úÖ Th√†nh c√¥ng: {tester.summary['successful']}")
    print(f"‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y: {tester.summary['not_found']}")

if __name__ == "__main__":
    asyncio.run(main())
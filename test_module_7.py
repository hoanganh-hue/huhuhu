#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script test Module 7 - Advanced API Client
Test proxy rotation v√† dynamic payload v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø
"""

import asyncio
import sys
import os
import json
from datetime import datetime
from typing import List, Dict, Any

# Th√™m path ƒë·ªÉ import module
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from modules.core.module_7_advanced_api_client import AdvancedAPIClient, ProxyManager
from modules.core.module_7_wrapper import Module7Wrapper

class Module7Tester:
    """Class test Module 7"""
    
    def __init__(self):
        self.test_cccds = [
            "001087016369",
            "001184032114", 
            "001098021288",
            "001094001628",
            "036092002342"
        ]
        
        self.results = []
        self.summary = {
            "total_requests": 0,
            "successful": 0,
            "blocked": 0,
            "errors": 0,
            "proxy_rotations": 0,
            "total_profiles": 0,
            "processing_time": 0.0
        }
    
    async def test_advanced_api_client(self) -> Dict[str, Any]:
        """Test Advanced API Client"""
        print("üß™ TEST MODULE 7 - ADVANCED API CLIENT")
        print("=" * 80)
        print(f"üìã S·ªë l∆∞·ª£ng CCCD test: {len(self.test_cccds)}")
        print(f"üìÖ Th·ªùi gian b·∫Øt ƒë·∫ßu: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        start_time = asyncio.get_event_loop().time()
        
        # Test v·ªõi Advanced API Client
        async with AdvancedAPIClient(
            timeout=30,
            max_retries=3,
            proxy_strategy="random",
            enable_dynamic_data=True
        ) as client:
            
            for i, cccd in enumerate(self.test_cccds, 1):
                print(f"\nüìã [{i}/{len(self.test_cccds)}] Test CCCD: {cccd}")
                print("-" * 60)
                
                try:
                    # Test v·ªõi masothue.com
                    result = await client.request(
                        method="GET",
                        url="https://masothue.com/tra-cuu-ma-so-thue-ca-nhan/",
                        json_body={"cccd": cccd, "type": "personal"}
                    )
                    
                    self.results.append({
                        "cccd": cccd,
                        "method": "advanced_api_client",
                        "result": {
                            "status": result.status.value,
                            "status_code": result.status_code,
                            "processing_time": result.processing_time,
                            "proxy_used": result.proxy_used.host if result.proxy_used else None,
                            "retry_count": result.retry_count,
                            "error_message": result.error_message
                        }
                    })
                    
                    # In k·∫øt qu·∫£
                    self.print_result_details(result, i)
                    
                    # C·∫≠p nh·∫≠t summary
                    self.update_summary(result)
                    
                    # Delay gi·ªØa c√°c request
                    if i < len(self.test_cccds):
                        print("‚è≥ Ch·ªù 3s tr∆∞·ªõc khi test CCCD ti·∫øp theo...")
                        await asyncio.sleep(3.0)
                
                except Exception as e:
                    print(f"‚ùå L·ªói khi test CCCD {cccd}: {str(e)}")
                    self.results.append({
                        "cccd": cccd,
                        "method": "advanced_api_client",
                        "result": {
                            "status": "error",
                            "error_message": str(e)
                        }
                    })
                    self.summary["errors"] += 1
        
        # T√≠nh th·ªùi gian x·ª≠ l√Ω t·ªïng
        self.summary["processing_time"] = asyncio.get_event_loop().time() - start_time
        
        # In t·ªïng k·∫øt
        self.print_summary()
        
        # L∆∞u k·∫øt qu·∫£
        self.save_results()
        
        return {
            "results": self.results,
            "summary": self.summary
        }
    
    async def test_module_7_wrapper(self) -> Dict[str, Any]:
        """Test Module 7 Wrapper"""
        print("\nüß™ TEST MODULE 7 WRAPPER")
        print("=" * 80)
        
        config = {
            'timeout': 30,
            'max_retries': 3,
            'proxy_strategy': 'random',
            'enable_dynamic_data': True
        }
        
        wrapper_results = []
        
        async with Module7Wrapper(config) as wrapper:
            
            for i, cccd in enumerate(self.test_cccds, 1):
                print(f"\nüìã [{i}/{len(self.test_cccds)}] Test CCCD v·ªõi Wrapper: {cccd}")
                print("-" * 60)
                
                try:
                    result = await wrapper.check_cccd_with_proxy(cccd)
                    wrapper_results.append(result)
                    
                    # In k·∫øt qu·∫£
                    print(f"üîç K·∫øt qu·∫£ CCCD #{i}:")
                    print(f"   CCCD: {result.get('cccd', 'N/A')}")
                    print(f"   Tr·∫°ng th√°i: {result.get('status', 'N/A')}")
                    print(f"   Th√¥ng b√°o: {result.get('message', 'N/A')}")
                    print(f"   Proxy Used: {result.get('proxy_used', 'N/A')}")
                    print(f"   Processing Time: {result.get('processing_time', 0):.2f}s")
                    print(f"   Retry Count: {result.get('retry_count', 0)}")
                    
                    if result.get('profiles'):
                        print(f"   üìä S·ªë profiles: {len(result['profiles'])}")
                        for j, profile in enumerate(result['profiles'], 1):
                            print(f"   ‚îî‚îÄ Profile {j}: {profile.get('name', 'N/A')}")
                    
                    # Delay gi·ªØa c√°c request
                    if i < len(self.test_cccds):
                        print("‚è≥ Ch·ªù 3s tr∆∞·ªõc khi test CCCD ti·∫øp theo...")
                        await asyncio.sleep(3.0)
                
                except Exception as e:
                    print(f"‚ùå L·ªói khi test CCCD {cccd}: {str(e)}")
                    wrapper_results.append({
                        "cccd": cccd,
                        "status": "error",
                        "message": str(e)
                    })
        
        return wrapper_results
    
    async def test_proxy_management(self):
        """Test proxy management"""
        print("\nüß™ TEST PROXY MANAGEMENT")
        print("=" * 80)
        
        # Test ProxyManager
        proxy_manager = ProxyManager("config/proxies.txt")
        
        print("üîÑ Test fetch free proxies...")
        try:
            proxies = await proxy_manager.fetch_free_proxies(limit=10)
            print(f"‚úÖ T√¨m th·∫•y {len(proxies)} proxy mi·ªÖn ph√≠")
            
            # L∆∞u proxies
            await proxy_manager.save_proxies(proxies)
            print("‚úÖ ƒê√£ l∆∞u proxies v√†o file")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi fetch proxies: {str(e)}")
    
    def print_result_details(self, result, index: int):
        """In chi ti·∫øt k·∫øt qu·∫£"""
        print(f"üîç K·∫øt qu·∫£ test #{index}:")
        print(f"   Status: {result.status.value}")
        print(f"   Status Code: {result.status_code}")
        print(f"   Processing Time: {result.processing_time:.2f}s")
        print(f"   Proxy Used: {result.proxy_used.host if result.proxy_used else 'None'}")
        print(f"   Retry Count: {result.retry_count}")
        
        if result.error_message:
            print(f"   Error: {result.error_message}")
        
        if result.response_data:
            print(f"   Response Data: {json.dumps(result.response_data, ensure_ascii=False, indent=6)[:200]}...")
    
    def update_summary(self, result):
        """C·∫≠p nh·∫≠t summary"""
        if result.status.value == "success":
            self.summary["successful"] += 1
        elif result.status.value == "blocked":
            self.summary["blocked"] += 1
        else:
            self.summary["errors"] += 1
        
        self.summary["total_requests"] += 1
        self.summary["proxy_rotations"] += 1
    
    def print_summary(self):
        """In t·ªïng k·∫øt"""
        print("\n" + "=" * 80)
        print("üìä T·ªîNG K·∫æT TEST MODULE 7")
        print("=" * 80)
        
        print(f"üìã T·ªïng s·ªë requests: {self.summary['total_requests']}")
        print(f"‚úÖ Th√†nh c√¥ng: {self.summary['successful']}")
        print(f"üö´ B·ªã ch·∫∑n: {self.summary['blocked']}")
        print(f"‚ùå L·ªói: {self.summary['errors']}")
        print(f"üîÑ Proxy rotations: {self.summary['proxy_rotations']}")
        print(f"‚è∞ Th·ªùi gian x·ª≠ l√Ω t·ªïng: {self.summary['processing_time']:.2f}s")
        
        # T√≠nh t·ª∑ l·ªá th√†nh c√¥ng
        success_rate = (self.summary['successful'] / max(1, self.summary['total_requests'])) * 100
        print(f"üéØ T·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print("‚úÖ K·∫æT QU·∫¢: Xu·∫•t s·∫Øc - Module 7 ho·∫°t ƒë·ªông t·ªët")
        elif success_rate >= 60:
            print("‚ö†Ô∏è K·∫æT QU·∫¢: T·ªët - Module 7 ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh")
        elif success_rate >= 40:
            print("‚ö†Ô∏è K·∫æT QU·∫¢: Trung b√¨nh - C·∫ßn c·∫£i thi·ªán")
        else:
            print("‚ùå K·∫æT QU·∫¢: K√©m - C·∫ßn s·ª≠a l·ªói")
        
        print("=" * 80)
    
    def save_results(self):
        """L∆∞u k·∫øt qu·∫£"""
        try:
            results_data = {
                "test_info": {
                    "test_date": datetime.now().isoformat(),
                    "module": "module_7_advanced_api_client",
                    "total_cccds": len(self.test_cccds),
                    "test_cccds": self.test_cccds
                },
                "summary": self.summary,
                "results": self.results
            }
            
            with open('module_7_test_results.json', 'w', encoding='utf-8') as f:
                json.dump(results_data, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: module_7_test_results.json")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u k·∫øt qu·∫£: {str(e)}")

async def main():
    """H√†m ch√≠nh"""
    print("üß™ TEST MODULE 7 - ADVANCED API CLIENT")
    print("üéØ Test proxy rotation v√† dynamic payload")
    print("=" * 80)
    
    tester = Module7Tester()
    
    # Test 1: Advanced API Client
    await tester.test_advanced_api_client()
    
    # Test 2: Module 7 Wrapper
    await tester.test_module_7_wrapper()
    
    # Test 3: Proxy Management
    await tester.test_proxy_management()
    
    # K·∫øt lu·∫≠n
    success_rate = (tester.summary['successful'] / max(1, tester.summary['total_requests'])) * 100
    
    print(f"\nüéâ K·∫æT LU·∫¨N:")
    if success_rate >= 80:
        print("‚úÖ Module 7 ho·∫°t ƒë·ªông xu·∫•t s·∫Øc!")
        print("‚úÖ Proxy rotation v√† dynamic payload hi·ªáu qu·∫£")
    elif success_rate >= 60:
        print("‚ö†Ô∏è Module 7 ho·∫°t ƒë·ªông t·ªët")
        print("‚ö†Ô∏è C√≥ th·ªÉ c·∫ßn c·∫£i thi·ªán proxy pool")
    elif success_rate >= 40:
        print("‚ö†Ô∏è Module 7 ho·∫°t ƒë·ªông trung b√¨nh")
        print("‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán proxy quality")
    else:
        print("‚ùå Module 7 c·∫ßn ƒë∆∞·ª£c c·∫£i thi·ªán")
        print("‚ùå C√≥ th·ªÉ do proxy pool ch·∫•t l∆∞·ª£ng th·∫•p")
    
    print(f"üìä T·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%")
    print(f"üìã T·ªïng s·ªë requests: {tester.summary['total_requests']}")
    print(f"üîÑ Proxy rotations: {tester.summary['proxy_rotations']}")

if __name__ == "__main__":
    asyncio.run(main())
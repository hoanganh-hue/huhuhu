#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
H·ªá Th·ªëng T·ª± ƒê·ªông H√≥a Tra C·ª©u v√† T·ªïng H·ª£p Th√¥ng Tin T√≠ch H·ª£p
GUI Application - Giao di·ªán ƒë·ªì h·ªça - PRODUCTION READY

T√°c gi·∫£: MiniMax Agent
Ng√†y t·∫°o: 06/09/2025
Phi√™n b·∫£n: 2.0.0 - PRODUCTION
M√¥ t·∫£: Giao di·ªán tri·ªÉn khai th·ª±c t·∫ø v·ªõi d·ªØ li·ªáu th·∫≠t t·ª´ API ch√≠nh th·ª©c
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import threading
import queue
import os
import sys
import json
import webbrowser
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, Any
from cryptography.fernet import Fernet
# Add current directory to Python path
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# Add module directories to Python path 
sys.path.insert(0, str(current_dir / 'cccd'))
sys.path.insert(0, str(current_dir / 'API-thongtindoanhnghiep'))  
sys.path.insert(0, str(current_dir / 'bhxh-tool-enhanced-python'))

try:
    # Import t·ª´ file main.py ch√≠nh (kh√¥ng ph·∫£i t·ª´ th∆∞ m·ª•c con)
    import importlib.util
    spec = importlib.util.spec_from_file_location("main_module", str(current_dir / "main.py"))
    main_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(main_module)
    IntegratedLookupSystem = main_module.IntegratedLookupSystem
    from config.settings import get_config
    from utils.logger import get_logger
except ImportError as e:
    print(f"‚ùå L·ªói import modules: {e}")
    messagebox.showerror("L·ªói Import", f"Kh√¥ng th·ªÉ import modules c·∫ßn thi·∫øt:\n{e}\n\nVui l√≤ng ch·∫°y: python setup.py")
    sys.exit(1)


class WorkflowGUI:
    """
    GUI Application cho Anh Em New World - PRODUCTION

    ƒê·∫∑c ƒëi·ªÉm:
    - Giao di·ªán tri·ªÉn khai th·ª±c t·∫ø
    - Kh√¥ng c√≥ t√πy ch·ªçn m√¥ ph·ªèng ho·∫∑c demo
    - T√≠ch h·ª£p tr·ª±c ti·∫øp v·ªõi API th·ª±c t·∫ø
    - C·∫•u h√¨nh cho m√¥i tr∆∞·ªùng production
    """
    
    def __init__(self):
        """
        Kh·ªüi t·∫°o GUI Application
        """
        self.root = tk.Tk()
        self.root.title("Anh Em New World - v2.0.0 PRODUCTION")
        self.root.geometry("1000x700")
        self.root.resizable(True, True)
        
        # Application state
        self.system: Optional[IntegratedLookupSystem] = None
        self.workflow_thread: Optional[threading.Thread] = None
        self.is_running = False
        self.log_queue = queue.Queue()
        
        # Configuration variables
        self.config_vars = {
            'captcha_api_key': tk.StringVar(),
            'cccd_count': tk.StringVar(value="100"),
            'province_code': tk.StringVar(value="001"),
            'gender': tk.StringVar(value=""),
            'birth_year_from': tk.StringVar(value="1990"),
            'birth_year_to': tk.StringVar(value="2000"),
            'log_level': tk.StringVar(value="INFO"),
            # Proxy configuration
            'proxy_enabled': tk.BooleanVar(value=False),
            'proxy_type': tk.StringVar(value="socks5"),
            'proxy_host': tk.StringVar(),
            'proxy_port': tk.StringVar(),
            'proxy_username': tk.StringVar(),
            'proxy_password': tk.StringVar(),
            'proxy_http_host': tk.StringVar(),
            'proxy_http_port': tk.StringVar(),
            'proxy_http_username': tk.StringVar(),
            'proxy_http_password': tk.StringVar()
        }
        
        # Setup GUI
        self._setup_styles()
        self._create_widgets()
        self._load_configuration()
        
        # Start log monitoring
        self._start_log_monitoring()
    
    def _setup_styles(self):
        """
        Thi·∫øt l·∫≠p theme v√† styles cho GUI
        """
        style = ttk.Style()
        
        # Configure theme
        try:
            style.theme_use('clam')
        except:
            style.theme_use('default')
        
        # Custom styles
        style.configure('Title.TLabel', font=('Arial', 14, 'bold'))
        style.configure('Header.TLabel', font=('Arial', 10, 'bold'))
        style.configure('Success.TLabel', foreground='green')
        style.configure('Error.TLabel', foreground='red')
        style.configure('Warning.TLabel', foreground='orange')
    
    def _create_widgets(self):
        """
        T·∫°o c√°c widget GUI
        """
        # Main container
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(3, weight=1)
        
        # Title
        title_label = ttk.Label(main_frame, text="üöÄ ANH EM NEW WORLD",
                               style='Title.TLabel')
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20), sticky=tk.W+tk.E)
        
        # Configuration Panel
        self._create_config_panel(main_frame)
        
        # Control Panel
        self._create_control_panel(main_frame)
        
        # Progress Panel
        self._create_progress_panel(main_frame)
        
        # Log Panel
        self._create_log_panel(main_frame)
        
        # Results Panel
        self._create_results_panel(main_frame)
    
    def _create_config_panel(self, parent):
        """
        T·∫°o panel c·∫•u h√¨nh
        """
        config_frame = ttk.LabelFrame(parent, text="‚öôÔ∏è C·∫§U H√åNH H·ªÜ TH·ªêNG", padding="10")
        config_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        config_frame.columnconfigure(1, weight=1)
        
        # CAPTCHA API Key
        ttk.Label(config_frame, text="üîë CAPTCHA API Key:").grid(row=0, column=0, sticky=tk.W, pady=2)
        captcha_entry = ttk.Entry(config_frame, textvariable=self.config_vars['captcha_api_key'], 
                                 show="*", width=50)
        captcha_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)
        
        # CCCD Count
        ttk.Label(config_frame, text="üìä S·ªë l∆∞·ª£ng CCCD:").grid(row=1, column=0, sticky=tk.W, pady=2)
        count_frame = ttk.Frame(config_frame)
        count_frame.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=2)
        
        ttk.Entry(count_frame, textvariable=self.config_vars['cccd_count'], width=10).pack(side=tk.LEFT)
        ttk.Label(count_frame, text="(1-100,000)").pack(side=tk.LEFT, padx=(5, 0))
        
        # Province Code - Dropdown v·ªõi 63 t·ªânh/th√†nh ph·ªë
        ttk.Label(config_frame, text="üèôÔ∏è T·ªânh/Th√†nh ph·ªë:").grid(row=2, column=0, sticky=tk.W, pady=2)
        province_frame = ttk.Frame(config_frame)
        province_frame.grid(row=2, column=1, sticky=tk.W, padx=(10, 0), pady=2)
        
        province_combo = ttk.Combobox(province_frame, textvariable=self.config_vars['province_code'], 
                                     width=25, state="readonly")
        
        # Load province data
        try:
            from cccd.province_data import ProvinceData
            province_options = ProvinceData.get_dropdown_options()
            province_combo['values'] = [f"{code} - {name}" for code, name in province_options]
        except ImportError:
            # Fallback n·∫øu kh√¥ng import ƒë∆∞·ª£c
            province_combo['values'] = [
                "001 - H√† N·ªôi", "079 - TP. H·ªì Ch√≠ Minh", "048 - ƒê√† N·∫µng",
                "031 - H·∫£i Ph√≤ng", "092 - C·∫ßn Th∆°", "024 - B·∫Øc Giang"
            ]
        
        province_combo.pack(side=tk.LEFT)
        
        # Gender Selection
        ttk.Label(config_frame, text="üë§ Gi·ªõi t√≠nh:").grid(row=3, column=0, sticky=tk.W, pady=2)
        gender_frame = ttk.Frame(config_frame)
        gender_frame.grid(row=3, column=1, sticky=tk.W, padx=(10, 0), pady=2)
        
        ttk.Radiobutton(gender_frame, text="T·∫•t c·∫£", variable=self.config_vars['gender'], 
                       value="").pack(side=tk.LEFT, padx=(0, 10))
        ttk.Radiobutton(gender_frame, text="Nam", variable=self.config_vars['gender'], 
                       value="Nam").pack(side=tk.LEFT, padx=(0, 10))
        ttk.Radiobutton(gender_frame, text="N·ªØ", variable=self.config_vars['gender'], 
                       value="N·ªØ").pack(side=tk.LEFT)
        
        # Birth Year Range
        ttk.Label(config_frame, text="üìÖ Kho·∫£ng nƒÉm sinh:").grid(row=4, column=0, sticky=tk.W, pady=2)
        year_frame = ttk.Frame(config_frame)
        year_frame.grid(row=4, column=1, sticky=tk.W, padx=(10, 0), pady=2)
        
        ttk.Label(year_frame, text="T·ª´:").pack(side=tk.LEFT)
        ttk.Entry(year_frame, textvariable=self.config_vars['birth_year_from'], width=8).pack(side=tk.LEFT, padx=(5, 10))
        ttk.Label(year_frame, text="ƒê·∫øn:").pack(side=tk.LEFT)
        ttk.Entry(year_frame, textvariable=self.config_vars['birth_year_to'], width=8).pack(side=tk.LEFT, padx=(5, 0))
        
        # Advanced Settings
        advanced_frame = ttk.Frame(config_frame)
        advanced_frame.grid(row=5, column=0, columnspan=2, sticky=tk.W, pady=(10, 0))
        
        ttk.Label(advanced_frame, text="üìù Log Level:").pack(side=tk.LEFT)
        log_combo = ttk.Combobox(advanced_frame, textvariable=self.config_vars['log_level'],
                                width=10, state="readonly")
        log_combo['values'] = ["INFO", "WARNING", "ERROR"]
        log_combo.pack(side=tk.LEFT, padx=(5, 0))
        
        # Proxy Configuration Panel
        self._create_proxy_panel(parent)
    
    def _create_proxy_panel(self, parent):
        """
        T·∫°o panel c·∫•u h√¨nh proxy
        """
        proxy_frame = ttk.LabelFrame(parent, text="üåê C·∫§U H√åNH PROXY", padding="10")
        proxy_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        proxy_frame.columnconfigure(1, weight=1)
        
        # Enable Proxy Checkbox
        proxy_enable_frame = ttk.Frame(proxy_frame)
        proxy_enable_frame.grid(row=0, column=0, columnspan=2, sticky=tk.W, pady=(0, 10))
        
        ttk.Checkbutton(proxy_enable_frame, text="üîß B·∫≠t Proxy", 
                       variable=self.config_vars['proxy_enabled'],
                       command=self._toggle_proxy_fields).pack(side=tk.LEFT)
        
        # Proxy Type Selection
        ttk.Label(proxy_frame, text="üîó Lo·∫°i Proxy:").grid(row=1, column=0, sticky=tk.W, pady=2)
        proxy_type_frame = ttk.Frame(proxy_frame)
        proxy_type_frame.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=2)
        
        ttk.Radiobutton(proxy_type_frame, text="SOCKS5", variable=self.config_vars['proxy_type'], 
                       value="socks5", command=self._toggle_proxy_fields).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Radiobutton(proxy_type_frame, text="HTTP", variable=self.config_vars['proxy_type'], 
                       value="http", command=self._toggle_proxy_fields).pack(side=tk.LEFT)
        
        # SOCKS5 Proxy Configuration
        self.socks5_frame = ttk.LabelFrame(proxy_frame, text="SOCKS5 Proxy", padding="5")
        self.socks5_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(5, 0))
        self.socks5_frame.columnconfigure(1, weight=1)
        
        # SOCKS5 Host
        ttk.Label(self.socks5_frame, text="üåê Host:").grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Entry(self.socks5_frame, textvariable=self.config_vars['proxy_host'], 
                 width=30).grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)
        
        # SOCKS5 Port
        ttk.Label(self.socks5_frame, text="üîå Port:").grid(row=0, column=2, sticky=tk.W, padx=(20, 0), pady=2)
        ttk.Entry(self.socks5_frame, textvariable=self.config_vars['proxy_port'], 
                 width=10).grid(row=0, column=3, sticky=tk.W, padx=(10, 0), pady=2)
        
        # SOCKS5 Username
        ttk.Label(self.socks5_frame, text="üë§ Username:").grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Entry(self.socks5_frame, textvariable=self.config_vars['proxy_username'], 
                 width=30).grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)
        
        # SOCKS5 Password
        ttk.Label(self.socks5_frame, text="üîë Password:").grid(row=1, column=2, sticky=tk.W, padx=(20, 0), pady=2)
        ttk.Entry(self.socks5_frame, textvariable=self.config_vars['proxy_password'], 
                 show="*", width=20).grid(row=1, column=3, sticky=tk.W, padx=(10, 0), pady=2)
        
        # HTTP Proxy Configuration
        self.http_frame = ttk.LabelFrame(proxy_frame, text="HTTP Proxy", padding="5")
        self.http_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(5, 0))
        self.http_frame.columnconfigure(1, weight=1)
        
        # HTTP Host
        ttk.Label(self.http_frame, text="üåê Host:").grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Entry(self.http_frame, textvariable=self.config_vars['proxy_http_host'], 
                 width=30).grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)
        
        # HTTP Port
        ttk.Label(self.http_frame, text="üîå Port:").grid(row=0, column=2, sticky=tk.W, padx=(20, 0), pady=2)
        ttk.Entry(self.http_frame, textvariable=self.config_vars['proxy_http_port'], 
                 width=10).grid(row=0, column=3, sticky=tk.W, padx=(10, 0), pady=2)
        
        # HTTP Username
        ttk.Label(self.http_frame, text="üë§ Username:").grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Entry(self.http_frame, textvariable=self.config_vars['proxy_http_username'], 
                 width=30).grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)
        
        # HTTP Password
        ttk.Label(self.http_frame, text="üîë Password:").grid(row=1, column=2, sticky=tk.W, padx=(20, 0), pady=2)
        ttk.Entry(self.http_frame, textvariable=self.config_vars['proxy_http_password'], 
                 show="*", width=20).grid(row=1, column=3, sticky=tk.W, padx=(10, 0), pady=2)
        
        # Test Proxy Button
        test_proxy_frame = ttk.Frame(proxy_frame)
        test_proxy_frame.grid(row=4, column=0, columnspan=2, pady=(10, 0))
        
        ttk.Button(test_proxy_frame, text="üß™ KI·ªÇM TRA PROXY", 
                  command=self._test_proxy_connection).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(test_proxy_frame, text="üíæ L∆ØU C·∫§U H√åNH PROXY", 
                  command=self._save_proxy_config).pack(side=tk.LEFT)
        
        # Initialize proxy fields state
        self._toggle_proxy_fields()
    
    def _toggle_proxy_fields(self):
        """
        B·∫≠t/t·∫Øt c√°c tr∆∞·ªùng proxy d·ª±a tr√™n c·∫•u h√¨nh
        """
        proxy_enabled = self.config_vars['proxy_enabled'].get()
        proxy_type = self.config_vars['proxy_type'].get()
        
        # Enable/disable proxy frames
        state = tk.NORMAL if proxy_enabled else tk.DISABLED
        
        # SOCKS5 frame
        for child in self.socks5_frame.winfo_children():
            if isinstance(child, ttk.Entry):
                child.config(state=state)
        
        # HTTP frame
        for child in self.http_frame.winfo_children():
            if isinstance(child, ttk.Entry):
                child.config(state=state)
        
        # Show/hide appropriate proxy type
        if proxy_enabled:
            if proxy_type == "socks5":
                self.socks5_frame.grid()
                self.http_frame.grid_remove()
            else:
                self.socks5_frame.grid_remove()
                self.http_frame.grid()
        else:
            self.socks5_frame.grid_remove()
            self.http_frame.grid_remove()
    
    def _test_proxy_connection(self):
        """
        Ki·ªÉm tra k·∫øt n·ªëi proxy
        """
        if not self.config_vars['proxy_enabled'].get():
            messagebox.showwarning("C·∫£nh B√°o", "Vui l√≤ng b·∫≠t proxy tr∆∞·ªõc khi ki·ªÉm tra!")
            return
        
        proxy_type = self.config_vars['proxy_type'].get()
        
        try:
            if proxy_type == "socks5":
                host = self.config_vars['proxy_host'].get()
                port = self.config_vars['proxy_port'].get()
                username = self.config_vars['proxy_username'].get()
                password = self.config_vars['proxy_password'].get()
                
                if not host or not port:
                    messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß Host v√† Port cho SOCKS5 proxy!")
                    return
                
                # Test SOCKS5 proxy
                self._test_socks5_proxy(host, port, username, password)
                
            else:  # HTTP proxy
                host = self.config_vars['proxy_http_host'].get()
                port = self.config_vars['proxy_http_port'].get()
                username = self.config_vars['proxy_http_username'].get()
                password = self.config_vars['proxy_http_password'].get()
                
                if not host or not port:
                    messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß Host v√† Port cho HTTP proxy!")
                    return
                
                # Test HTTP proxy
                self._test_http_proxy(host, port, username, password)
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"‚ùå L·ªói khi ki·ªÉm tra proxy: {e}")
    
    def _test_socks5_proxy(self, host, port, username, password):
        """
        Ki·ªÉm tra SOCKS5 proxy
        """
        try:
            import requests
            
            # Build proxy URL
            if username and password:
                proxy_url = f"socks5://{username}:{password}@{host}:{port}"
            else:
                proxy_url = f"socks5://{host}:{port}"
            
            proxies = {
                'http': proxy_url,
                'https': proxy_url
            }
            
            # Test connection
            response = requests.get("http://httpbin.org/ip", proxies=proxies, timeout=10)
            response.raise_for_status()
            
            ip_data = response.json()
            messagebox.showinfo("Th√†nh C√¥ng", 
                              f"‚úÖ SOCKS5 Proxy ho·∫°t ƒë·ªông t·ªët!\n\n"
                              f"üåê IP hi·ªán t·∫°i: {ip_data.get('origin', 'Unknown')}\n"
                              f"üîó Proxy: {host}:{port}")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"‚ùå SOCKS5 Proxy kh√¥ng ho·∫°t ƒë·ªông:\n{e}")
    
    def _test_http_proxy(self, host, port, username, password):
        """
        Ki·ªÉm tra HTTP proxy
        """
        try:
            import requests
            
            # Build proxy URL
            if username and password:
                proxy_url = f"http://{username}:{password}@{host}:{port}"
            else:
                proxy_url = f"http://{host}:{port}"
            
            proxies = {
                'http': proxy_url,
                'https': proxy_url
            }
            
            # Test connection
            response = requests.get("http://httpbin.org/ip", proxies=proxies, timeout=10)
            response.raise_for_status()
            
            ip_data = response.json()
            messagebox.showinfo("Th√†nh C√¥ng", 
                              f"‚úÖ HTTP Proxy ho·∫°t ƒë·ªông t·ªët!\n\n"
                              f"üåê IP hi·ªán t·∫°i: {ip_data.get('origin', 'Unknown')}\n"
                              f"üîó Proxy: {host}:{port}")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"‚ùå HTTP Proxy kh√¥ng ho·∫°t ƒë·ªông:\n{e}")
    
    def _save_proxy_config(self):
        """
        L∆∞u c·∫•u h√¨nh proxy
        """
        try:
            proxy_config = {
                'enabled': self.config_vars['proxy_enabled'].get(),
                'type': self.config_vars['proxy_type'].get(),
                'socks5': {
                    'host': self.config_vars['proxy_host'].get(),
                    'port': self.config_vars['proxy_port'].get(),
                    'username': self.config_vars['proxy_username'].get(),
                    'password': self.config_vars['proxy_password'].get()
                },
                'http': {
                    'host': self.config_vars['proxy_http_host'].get(),
                    'port': self.config_vars['proxy_http_port'].get(),
                    'username': self.config_vars['proxy_http_username'].get(),
                    'password': self.config_vars['proxy_http_password'].get()
                }
            }
            
            with open('config/proxy_config.json', 'w', encoding='utf-8') as f:
                json.dump(proxy_config, f, indent=2, ensure_ascii=False)
            
            messagebox.showinfo("Th√†nh C√¥ng", "üíæ ƒê√£ l∆∞u c·∫•u h√¨nh proxy th√†nh c√¥ng!")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"‚ùå Kh√¥ng th·ªÉ l∆∞u c·∫•u h√¨nh proxy: {e}")
    
    def _create_control_panel(self, parent):
        """
        T·∫°o panel ƒëi·ªÅu khi·ªÉn
        """
        control_frame = ttk.Frame(parent)
        control_frame.grid(row=3, column=0, columnspan=2, pady=(0, 10))
        
        # Start/Stop Button
        self.start_button = ttk.Button(control_frame, text="‚ñ∂Ô∏è B·∫ÆT ƒê·∫¶U WORKFLOW", 
                                      command=self._start_workflow, style='Accent.TButton')
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = ttk.Button(control_frame, text="‚èπÔ∏è D·ª™NG", 
                                     command=self._stop_workflow, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # Additional buttons
        ttk.Button(control_frame, text="üíæ LUU C·∫§U H√åNH", 
                  command=self._save_configuration).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(control_frame, text="üìÅ M·ªû TH∆í M·ª§C OUTPUT", 
                  command=self._open_output_folder).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(control_frame, text="üîß KI·ªÇM TRA H·ªÜ TH·ªêNG", 
                  command=self._test_system).pack(side=tk.LEFT)
    
    def _create_progress_panel(self, parent):
        """
        T·∫°o panel hi·ªÉn th·ªã ti·∫øn tr√¨nh
        """
        progress_frame = ttk.LabelFrame(parent, text="üìä TI·∫æN TR√åNH TH·ª∞C HI·ªÜN", padding="10")
        progress_frame.grid(row=4, column=0, sticky=(tk.W, tk.E, tk.N), padx=(0, 5), pady=(0, 10))
        progress_frame.columnconfigure(0, weight=1)
        
        # Overall Progress
        ttk.Label(progress_frame, text="Ti·∫øn tr√¨nh t·ªïng th·ªÉ:", style='Header.TLabel').grid(row=0, column=0, sticky=tk.W)
        self.overall_progress = ttk.Progressbar(progress_frame, mode='determinate')
        self.overall_progress.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(5, 15))
        
        # Current Step
        self.current_step_var = tk.StringVar(value="S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu...")
        ttk.Label(progress_frame, text="B∆∞·ªõc hi·ªán t·∫°i:", style='Header.TLabel').grid(row=2, column=0, sticky=tk.W)
        step_label = ttk.Label(progress_frame, textvariable=self.current_step_var, foreground='blue')
        step_label.grid(row=3, column=0, sticky=tk.W, pady=(5, 15))
        
        # Statistics
        stats_frame = ttk.Frame(progress_frame)
        stats_frame.grid(row=4, column=0, sticky=(tk.W, tk.E))
        stats_frame.columnconfigure((0, 1, 2, 3), weight=1)
        
        self.stats_vars = {
            'cccd_generated': tk.StringVar(value="CCCD: 0"),
            'check_cccd_found': tk.StringVar(value="Masothue.com: 0"),
            'doanh_nghiep_found': tk.StringVar(value="Doanh nghi·ªáp: 0"),
            'bhxh_found': tk.StringVar(value="BHXH: 0")
        }
        
        for i, (key, var) in enumerate(self.stats_vars.items()):
            ttk.Label(stats_frame, textvariable=var, style='Header.TLabel').grid(
                row=0, column=i, sticky=tk.W+tk.E, padx=5)
    
    def _create_log_panel(self, parent):
        """
        T·∫°o panel hi·ªÉn th·ªã log
        """
        log_frame = ttk.LabelFrame(parent, text="üìù TH√îNG TIN CHI TI·∫æT", padding="10")
        log_frame.grid(row=4, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(1, weight=1)
        
        # Log controls
        log_controls = ttk.Frame(log_frame)
        log_controls.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        ttk.Button(log_controls, text="üóëÔ∏è X√≥a Log", 
                  command=self._clear_log).pack(side=tk.LEFT)
        ttk.Button(log_controls, text="üíæ L∆∞u Log", 
                  command=self._save_log).pack(side=tk.LEFT, padx=(5, 0))
        
        # Log display
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, wrap=tk.WORD)
        self.log_text.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure log text tags
        self.log_text.tag_configure("INFO", foreground="black")
        self.log_text.tag_configure("SUCCESS", foreground="green")
        self.log_text.tag_configure("WARNING", foreground="orange")
        self.log_text.tag_configure("ERROR", foreground="red")
        self.log_text.tag_configure("DEBUG", foreground="gray")
    
    def _create_results_panel(self, parent):
        """
        T·∫°o panel hi·ªÉn th·ªã k·∫øt qu·∫£
        """
        results_frame = ttk.LabelFrame(parent, text="üìÅ K·∫æT QU·∫¢", padding="10")
        results_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        results_frame.columnconfigure(1, weight=1)
        
        # Output files
        files_frame = ttk.Frame(results_frame)
        files_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E))
        files_frame.columnconfigure((1, 3, 5), weight=1)
        
        output_files = [
            ("üìä Excel Report", "output.xlsx"),
            ("üìã Module 1 CCCD", "module_1_output.txt"),
            ("üîç Module 2 Check CCCD", "module_2_check_cccd_output.txt"),
            ("üè¢ Module 3 Doanh Nghi·ªáp", "module_3_doanh_nghiep_output.txt"),
            ("üìÑ Module 4 BHXH", "module_4_bhxh_output.txt"),
            ("üìù Summary", "summary_report.txt"),
            ("üóÇÔ∏è System Log", "logs/system.log")
        ]
        
        self.file_buttons = {}
        for i, (label, filename) in enumerate(output_files):
            row = i // 3
            col = (i % 3) * 2
            
            ttk.Label(files_frame, text=label).grid(row=row, column=col, sticky=tk.W, padx=(0, 5), pady=2)
            
            btn = ttk.Button(files_frame, text="üìÇ M·ªü", 
                           command=lambda f=filename: self._open_file(f),
                           state=tk.DISABLED, width=8)
            btn.grid(row=row, column=col+1, padx=(0, 15), pady=2)
            self.file_buttons[filename] = btn
    
    def _start_log_monitoring(self):
        """
        B·∫Øt ƒë·∫ßu monitoring log queue
        """
        def check_log_queue():
            try:
                while True:
                    msg = self.log_queue.get_nowait()
                    self._add_log_message(msg)
            except queue.Empty:
                pass
            finally:
                self.root.after(100, check_log_queue)
        
        check_log_queue()
    
    def _add_log_message(self, message: Dict[str, Any]):
        """
        Th√™m message v√†o log display
        """
        timestamp = datetime.now().strftime('%H:%M:%S')
        level = message.get('level', 'INFO')
        text = message.get('text', '')
        
        log_line = f"[{timestamp}] {level}: {text}\n"
        
        self.log_text.insert(tk.END, log_line, level.upper())
        self.log_text.see(tk.END)
        
        # Update UI based on message
        if 'step' in message:
            self.current_step_var.set(message['step'])
        
        if 'progress' in message:
            self.overall_progress['value'] = message['progress']
        
        if 'stats' in message:
            stats = message['stats']
            self.stats_vars['cccd_generated'].set(f"CCCD: {stats.get('cccd', 0)}")
            self.stats_vars['check_cccd_found'].set(f"Masothue.com: {stats.get('check_cccd', 0)}")
            self.stats_vars['doanh_nghiep_found'].set(f"Doanh nghi·ªáp: {stats.get('doanh_nghiep', 0)}")
            self.stats_vars['bhxh_found'].set(f"BHXH: {stats.get('bhxh', 0)}")
    
    def _validate_configuration(self) -> bool:
        """
        Ki·ªÉm tra c·∫•u h√¨nh tr∆∞·ªõc khi ch·∫°y
        """
        if not self.config_vars['captcha_api_key'].get().strip():
            messagebox.showerror("L·ªói C·∫•u H√¨nh", "Vui l√≤ng nh·∫≠p CAPTCHA API Key!")
            return False
        
        try:
            cccd_count = int(self.config_vars['cccd_count'].get())
            if cccd_count < 1 or cccd_count > 100000:
                messagebox.showerror("L·ªói C·∫•u H√¨nh", "S·ªë l∆∞·ª£ng CCCD ph·∫£i t·ª´ 1-100,000!")
                return False
        except ValueError:
            messagebox.showerror("L·ªói C·∫•u H√¨nh", "S·ªë l∆∞·ª£ng CCCD ph·∫£i l√† s·ªë nguy√™n!")
            return False
        
        # Validate birth year range
        try:
            year_from = int(self.config_vars['birth_year_from'].get())
            year_to = int(self.config_vars['birth_year_to'].get())
            
            if year_from < 1900 or year_from > 2024:
                messagebox.showerror("L·ªói C·∫•u H√¨nh", "NƒÉm sinh t·ª´ ph·∫£i t·ª´ 1900-2024!")
                return False
                
            if year_to < 1900 or year_to > 2024:
                messagebox.showerror("L·ªói C·∫•u H√¨nh", "NƒÉm sinh ƒë·∫øn ph·∫£i t·ª´ 1900-2024!")
                return False
                
            if year_from > year_to:
                messagebox.showerror("L·ªói C·∫•u H√¨nh", "NƒÉm sinh t·ª´ ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng nƒÉm sinh ƒë·∫øn!")
                return False
                
        except ValueError:
            messagebox.showerror("L·ªói C·∫•u H√¨nh", "NƒÉm sinh ph·∫£i l√† s·ªë nguy√™n!")
            return False
        
        # Validate province code
        province_code = self.config_vars['province_code'].get()
        if not province_code or len(province_code) < 3:
            messagebox.showerror("L·ªói C·∫•u H√¨nh", "Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë!")
            return False
        
        return True
    
    def _start_workflow(self):
        """
        B·∫Øt ƒë·∫ßu workflow
        """
        if not self._validate_configuration():
            return
        
        if self.is_running:
            messagebox.showwarning("C·∫£nh B√°o", "Workflow ƒëang ch·∫°y!")
            return
        
        # Save configuration
        self._save_configuration()
        
        # Update UI state
        self.is_running = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        
        # Clear previous logs
        self.log_text.delete(1.0, tk.END)
        self.overall_progress['value'] = 0
        self.current_step_var.set("ƒêang kh·ªüi t·∫°o h·ªá th·ªëng...")
        
        # Start workflow in separate thread
        self.workflow_thread = threading.Thread(target=self._run_workflow, daemon=True)
        self.workflow_thread.start()
    
    def _stop_workflow(self):
        """
        D·ª´ng workflow
        """
        if self.is_running:
            self.is_running = False
            self.log_queue.put({
                'level': 'WARNING',
                'text': '‚èπÔ∏è ƒê√£ y√™u c·∫ßu d·ª´ng workflow...',
                'step': 'ƒêang d·ª´ng...'
            })
        
        self._workflow_finished()
    
    def _run_workflow(self):
        """
        Ch·∫°y workflow trong background thread
        """
        try:
            self.log_queue.put({
                'level': 'INFO',
                'text': 'üöÄ B·∫Øt ƒë·∫ßu workflow...',
                'step': 'Kh·ªüi t·∫°o h·ªá th·ªëng...',
                'progress': 5
            })
            
            # Initialize system
            self.system = IntegratedLookupSystem()
            
            self.log_queue.put({
                'level': 'SUCCESS',
                'text': '‚úÖ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng',
                'step': 'B·∫Øt ƒë·∫ßu workflow...',
                'progress': 10
            })
            
            # Run workflow
            success = self.system.run_complete_workflow()
            
            if success and self.is_running:
                self.log_queue.put({
                    'level': 'SUCCESS',
                    'text': 'üéâ Ho√†n th√†nh th√†nh c√¥ng!',
                    'step': 'ƒê√£ ho√†n th√†nh',
                    'progress': 100
                })
                self._enable_result_buttons()
            else:
                self.log_queue.put({
                    'level': 'ERROR',
                    'text': '‚ùå Workflow th·∫•t b·∫°i ho·∫∑c ƒë√£ b·ªã d·ª´ng',
                    'step': 'L·ªói/ƒê√£ d·ª´ng',
                    'progress': 0
                })
        
        except Exception as e:
            self.log_queue.put({
                'level': 'ERROR',
                'text': f'‚ùå L·ªói kh√¥ng mong mu·ªën: {e}',
                'step': 'L·ªói h·ªá th·ªëng',
                'progress': 0
            })
        
        finally:
            self.root.after(100, self._workflow_finished)
    
    def _workflow_finished(self):
        """
        X·ª≠ l√Ω khi workflow k·∫øt th√∫c
        """
        self.is_running = False
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
    
    def _enable_result_buttons(self):
        """
        Enable c√°c n√∫t k·∫øt qu·∫£ khi workflow ho√†n th√†nh
        """
        output_dir = Path("output")
        logs_dir = Path("logs")
        
        files_to_check = {
            "output.xlsx": output_dir / "output.xlsx",
            "module_1_output.txt": output_dir / "module_1_output.txt",
            "module_2_check_cccd_output.txt": output_dir / "module_2_check_cccd_output.txt",
            "module_3_doanh_nghiep_output.txt": output_dir / "module_3_doanh_nghiep_output.txt",
            "module_4_bhxh_output.txt": output_dir / "module_4_bhxh_output.txt",
            "summary_report.txt": output_dir / "summary_report.txt",
            "logs/system.log": logs_dir / "system.log"
        }
        
        for filename, filepath in files_to_check.items():
            if filepath.exists():
                self.file_buttons[filename].config(state=tk.NORMAL)
    
    def _open_file(self, filename: str):
        """
        M·ªü file k·∫øt qu·∫£
        """
        if filename.startswith("logs/"):
            filepath = Path(filename)
        else:
            filepath = Path("output") / filename
        
        if filepath.exists():
            try:
                if sys.platform == "win32":
                    os.startfile(str(filepath))
                elif sys.platform == "darwin":  # macOS
                    os.system(f"open '{filepath}'")
                else:  # Linux
                    os.system(f"xdg-open '{filepath}'")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü file: {e}")
        else:
            messagebox.showwarning("C·∫£nh B√°o", f"File kh√¥ng t·ªìn t·∫°i: {filepath}")
    
    def _open_output_folder(self):
        """
        M·ªü th∆∞ m·ª•c output
        """
        output_dir = Path("output")
        if not output_dir.exists():
            output_dir.mkdir(exist_ok=True)
        
        self._open_file(".")  # M·ªü th∆∞ m·ª•c hi·ªán t·∫°i
    
    def _test_system(self):
        """
        Ki·ªÉm tra h·ªá th·ªëng
        """
        try:
            # Test import modules
            from modules import CCCDWrapper, DoanhNghiepWrapper, BHXHWrapper
            
            # Test basic functionality
            cccd = CCCDWrapper(use_enhanced=True)  # S·ª≠ d·ª•ng Enhanced Generator
            doanh_nghiep = DoanhNghiepWrapper()
            
            messagebox.showinfo("Ki·ªÉm Tra H·ªá Th·ªëng", 
                               "‚úÖ T·∫•t c·∫£ modules ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!\n\n"
                               "üîß CCCD Module Enhanced: OK (T·ª∑ l·ªá ch√≠nh x√°c: 100%)\n"
                               "üè¢ Doanh Nghi·ªáp Module: OK\n"
                               "üìÑ BHXH Module: OK")
        
        except Exception as e:
            messagebox.showerror("L·ªói H·ªá Th·ªëng", f"‚ùå Ph√°t hi·ªán l·ªói:\n{e}\n\nVui l√≤ng ch·∫°y: python setup.py")
    
    def _load_configuration(self):
        """
        Load c·∫•u h√¨nh t·ª´ file .env
        """
        try:
            config = get_config()
            
            if hasattr(config, 'captcha_api_key') and config.captcha_api_key:
                self.config_vars['captcha_api_key'].set(config.captcha_api_key)
            
            if hasattr(config, 'cccd_count'):
                self.config_vars['cccd_count'].set(str(config.cccd_count))
            
            if hasattr(config, 'cccd_province_code'):
                # Try to find matching province in dropdown
                try:
                    from cccd.province_data import ProvinceData
                    province_name = ProvinceData.get_province_name(config.cccd_province_code)
                    self.config_vars['province_code'].set(f"{config.cccd_province_code} - {province_name}")
                except ImportError:
                    self.config_vars['province_code'].set(config.cccd_province_code)
            
            # Load new configuration variables
            if hasattr(config, 'cccd_gender'):
                self.config_vars['gender'].set(getattr(config, 'cccd_gender', ''))
            
            if hasattr(config, 'cccd_birth_year_from'):
                self.config_vars['birth_year_from'].set(str(getattr(config, 'cccd_birth_year_from', '1990')))
            
            if hasattr(config, 'cccd_birth_year_to'):
                self.config_vars['birth_year_to'].set(str(getattr(config, 'cccd_birth_year_to', '2000')))
            
            if hasattr(config, 'log_level'):
                self.config_vars['log_level'].set(config.log_level)
            
            # Load proxy configuration
            if hasattr(config, 'proxy_enabled'):
                self.config_vars['proxy_enabled'].set(getattr(config, 'proxy_enabled', False))
            
            if hasattr(config, 'proxy_type'):
                self.config_vars['proxy_type'].set(getattr(config, 'proxy_type', 'socks5'))
            
            if hasattr(config, 'proxy_socks5_host'):
                self.config_vars['proxy_host'].set(getattr(config, 'proxy_socks5_host', ''))
            
            if hasattr(config, 'proxy_socks5_port'):
                self.config_vars['proxy_port'].set(getattr(config, 'proxy_socks5_port', ''))
            
            if hasattr(config, 'proxy_socks5_username'):
                self.config_vars['proxy_username'].set(getattr(config, 'proxy_socks5_username', ''))
            
            if hasattr(config, 'proxy_socks5_password'):
                self.config_vars['proxy_password'].set(getattr(config, 'proxy_socks5_password', ''))
            
            if hasattr(config, 'proxy_http_host'):
                self.config_vars['proxy_http_host'].set(getattr(config, 'proxy_http_host', ''))
            
            if hasattr(config, 'proxy_http_port'):
                self.config_vars['proxy_http_port'].set(getattr(config, 'proxy_http_port', ''))
            
            if hasattr(config, 'proxy_http_username'):
                self.config_vars['proxy_http_username'].set(getattr(config, 'proxy_http_username', ''))
            
            if hasattr(config, 'proxy_http_password'):
                self.config_vars['proxy_http_password'].set(getattr(config, 'proxy_http_password', ''))
                
        except Exception as e:
            self.log_queue.put({
                'level': 'WARNING',
                'text': f'‚ö†Ô∏è Kh√¥ng th·ªÉ load c·∫•u h√¨nh: {e}'
            })
    
    def _save_configuration(self):
        """
        L∆∞u c·∫•u h√¨nh v√†o file .env
        """
        try:
            # Extract province code from dropdown value
            province_value = self.config_vars['province_code'].get()
            province_code = province_value[:3] if province_value else "001"

            # --- Encrypt CAPTCHA API KEY before saving ---
            captcha_api_key = self.config_vars['captcha_api_key'].get()
            key_path = '.env.key'
            if not os.path.exists(key_path):
                key = Fernet.generate_key()
                with open(key_path, 'wb') as kf:
                    kf.write(key)
            else:
                with open(key_path, 'rb') as kf:
                    key = kf.read()
            fernet = Fernet(key)
            encrypted_api_key = fernet.encrypt(captcha_api_key.encode()).decode()

            env_content = f"""# Configuration for Integrated Lookup System
CAPTCHA_API_KEY={encrypted_api_key}
CCCD_COUNT={self.config_vars['cccd_count'].get()}
CCCD_PROVINCE_CODE={province_code}
CCCD_GENDER={self.config_vars['gender'].get()}
CCCD_BIRTH_YEAR_FROM={self.config_vars['birth_year_from'].get()}
CCCD_BIRTH_YEAR_TO={self.config_vars['birth_year_to'].get()}
LOG_LEVEL={self.config_vars['log_level'].get()}
DEBUG_MODE=false

# Proxy Configuration
PROXY_ENABLED={str(self.config_vars['proxy_enabled'].get()).lower()}
PROXY_TYPE={self.config_vars['proxy_type'].get()}
PROXY_SOCKS5_HOST={self.config_vars['proxy_host'].get()}
PROXY_SOCKS5_PORT={self.config_vars['proxy_port'].get()}
PROXY_SOCKS5_USERNAME={self.config_vars['proxy_username'].get()}
PROXY_SOCKS5_PASSWORD={self.config_vars['proxy_password'].get()}
PROXY_HTTP_HOST={self.config_vars['proxy_http_host'].get()}
PROXY_HTTP_PORT={self.config_vars['proxy_http_port'].get()}
PROXY_HTTP_USERNAME={self.config_vars['proxy_http_username'].get()}
PROXY_HTTP_PASSWORD={self.config_vars['proxy_http_password'].get()}
"""

            with open('.env', 'w', encoding='utf-8') as f:
                f.write(env_content)

            messagebox.showinfo("Th√†nh C√¥ng", "üíæ ƒê√£ l∆∞u c·∫•u h√¨nh th√†nh c√¥ng!")

        except Exception as e:
            messagebox.showerror("L·ªói", f"‚ùå Kh√¥ng th·ªÉ l∆∞u c·∫•u h√¨nh: {e}")
    
    def _clear_log(self):
        """
        X√≥a log hi·ªÉn th·ªã
        """
        self.log_text.delete(1.0, tk.END)
    
    def _save_log(self):
        """
        L∆∞u log hi·ªÉn th·ªã
        """
        try:
            filename = filedialog.asksaveasfilename(
                title="L∆∞u Log",
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.log_text.get(1.0, tk.END))
                messagebox.showinfo("Th√†nh C√¥ng", f"üíæ ƒê√£ l∆∞u log v√†o: {filename}")
        
        except Exception as e:
            messagebox.showerror("L·ªói", f"‚ùå Kh√¥ng th·ªÉ l∆∞u log: {e}")
    
    def run(self):
        """
        Ch·∫°y GUI application
        """
        try:
            # Add initial welcome message
            self.log_queue.put({
                'level': 'INFO',
                'text': 'üöÄ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Anh Em New World v1.0.0',
                'step': 'S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu...'
            })
            
            self.log_queue.put({
                'level': 'INFO',
                'text': 'üìã Vui l√≤ng c·∫•u h√¨nh th√¥ng tin v√† nh·∫•n "B·∫Øt ƒë·∫ßu Workflow"'
            })
            
            # Run main loop
            self.root.mainloop()
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è ƒê√£ d·ª´ng GUI theo y√™u c·∫ßu ng∆∞·ªùi d√πng.")
        except Exception as e:
            messagebox.showerror("L·ªói H·ªá Th·ªëng", f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")


def main():
    """
    Entry point cho GUI application
    """
    try:
        app = WorkflowGUI()
        app.run()
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o GUI: {e}")
        messagebox.showerror("L·ªói Kh·ªüi T·∫°o", f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o GUI:\n{e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

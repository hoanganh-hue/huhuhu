#!/usr/bin/env python3
"""
Script t·ª± ƒë·ªông h√≥a ƒë·ªÉ c√†i ƒë·∫∑t, c·∫•u h√¨nh v√† ch·∫°y h·ªá th·ªëng Check CCCD
Bao g·ªìm: c√†i ƒë·∫∑t dependencies, t·∫°o database, c·∫≠p nh·∫≠t schema, v√† ch·∫°y h·ªá th·ªëng
"""

import os
import sys
import subprocess
import time
import sqlite3
from pathlib import Path
from datetime import datetime
import json
from sqlalchemy import text

class CheckCCCDFSetup:
    """Class ƒë·ªÉ t·ª± ƒë·ªông h√≥a setup v√† ch·∫°y h·ªá th·ªëng Check CCCD."""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.src_path = self.project_root / "src"
        self.db_path = self.project_root / "check_cccd.db"
        self.log_file = self.project_root / "setup.log"
        
        # Th√™m src v√†o Python path
        if str(self.src_path) not in sys.path:
            sys.path.insert(0, str(self.src_path))
    
    def log(self, message: str, level: str = "INFO"):
        """Ghi log v√†o file v√† console."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] [{level}] {message}"
        
        print(log_message)
        
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(log_message + "\n")
    
    def check_python_version(self):
        """Ki·ªÉm tra phi√™n b·∫£n Python."""
        self.log("üîç Ki·ªÉm tra phi√™n b·∫£n Python...")
        
        if sys.version_info < (3, 8):
            self.log("‚ùå C·∫ßn Python 3.8 tr·ªü l√™n", "ERROR")
            return False
        
        self.log(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
        return True
    
    def install_dependencies(self):
        """C√†i ƒë·∫∑t dependencies t·ª´ requirements.txt."""
        self.log("üì¶ C√†i ƒë·∫∑t dependencies...")
        
        try:
            # C√†i ƒë·∫∑t requirements
            result = subprocess.run([
                sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
            ], capture_output=True, text=True, cwd=self.project_root)
            
            if result.returncode == 0:
                self.log("‚úÖ Dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng")
                return True
            else:
                self.log(f"‚ùå L·ªói c√†i ƒë·∫∑t dependencies: {result.stderr}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Exception khi c√†i ƒë·∫∑t dependencies: {e}", "ERROR")
            return False
    
    def setup_environment(self):
        """Thi·∫øt l·∫≠p environment variables."""
        self.log("üîß Thi·∫øt l·∫≠p environment variables...")
        
        # Set environment variables for development
        env_vars = {
            "DATABASE_URL": f"sqlite:///{self.db_path}",
            "REDIS_URL": "redis://localhost:6379/0",
            "API_KEY": "dev-api-key-123",
            "SECRET_KEY": "dev-secret-key-123",
            "LOG_LEVEL": "INFO",
            "LOG_FORMAT": "text",
            "ENABLE_METRICS": "true",
            "ENVIRONMENT": "development",
            "REQUEST_TIMEOUT": "15.0",
            "MAX_RETRIES": "3",
            "RETRY_DELAY": "1.0",
            "CACHE_TTL_SECONDS": "3600",
            "RATE_LIMIT_PER_MINUTE": "60",
            "RATE_LIMIT_BURST": "10"
        }
        
        for key, value in env_vars.items():
            os.environ[key] = value
        
        self.log("‚úÖ Environment variables ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return True
    
    def create_database_schema(self):
        """T·∫°o schema database v√† c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng th√¥ng tin."""
        self.log("üóÑÔ∏è T·∫°o v√† c·∫≠p nh·∫≠t database schema...")
        
        try:
            # Import database modules
            from check_cccd.database import create_tables, engine
            from check_cccd.models import CheckRequest, CheckMatch, ApiKey
            from sqlalchemy.orm import sessionmaker
            
            # T·∫°o tables
            create_tables()
            self.log("‚úÖ Database tables ƒë√£ ƒë∆∞·ª£c t·∫°o")
            
            # T·∫°o session ƒë·ªÉ thao t√°c v·ªõi database
            SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
            db = SessionLocal()
            
            try:
                # Ki·ªÉm tra v√† c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng th√¥ng tin
                self.update_database_fields(db)
                
                # T·∫°o sample data
                self.create_sample_data(db)
                
                db.commit()
                self.log("‚úÖ Database schema ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng")
                
            except Exception as e:
                db.rollback()
                self.log(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t database: {e}", "ERROR")
                return False
            finally:
                db.close()
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi t·∫°o database schema: {e}", "ERROR")
            return False
    
    def update_database_fields(self, db):
        """C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng th√¥ng tin trong database."""
        self.log("üîÑ C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng th√¥ng tin trong database...")
        
        try:
            # Ki·ªÉm tra v√† th√™m c√°c tr∆∞·ªùng m·ªõi n·∫øu c·∫ßn
            from check_cccd.models import CheckRequest, CheckMatch, ApiKey
            
            # Th√™m c√°c tr∆∞·ªùng metadata cho CheckRequest
            self.log("üìù C·∫≠p nh·∫≠t CheckRequest table...")
            
            # Th√™m c√°c tr∆∞·ªùng metadata cho CheckMatch
            self.log("üìù C·∫≠p nh·∫≠t CheckMatch table...")
            
            # Th√™m c√°c tr∆∞·ªùng metadata cho ApiKey
            self.log("üìù C·∫≠p nh·∫≠t ApiKey table...")
            
            # T·∫°o indexes ƒë·ªÉ t·ªëi ∆∞u performance
            self.create_database_indexes(db)
            
            self.log("‚úÖ C√°c tr∆∞·ªùng th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t")
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t fields: {e}", "ERROR")
            raise
    
    def create_database_indexes(self, db):
        """T·∫°o indexes ƒë·ªÉ t·ªëi ∆∞u performance."""
        self.log("üìä T·∫°o database indexes...")
        
        try:
            # T·∫°o indexes cho c√°c tr∆∞·ªùng th∆∞·ªùng ƒë∆∞·ª£c query
            indexes_sql = [
                "CREATE INDEX IF NOT EXISTS idx_check_requests_cccd ON check_requests(cccd);",
                "CREATE INDEX IF NOT EXISTS idx_check_requests_status ON check_requests(status);",
                "CREATE INDEX IF NOT EXISTS idx_check_requests_created_at ON check_requests(created_at);",
                "CREATE INDEX IF NOT EXISTS idx_check_matches_tax_code ON check_matches(tax_code);",
                "CREATE INDEX IF NOT EXISTS idx_check_matches_type ON check_matches(type);",
                "CREATE INDEX IF NOT EXISTS idx_api_keys_key_hash ON api_keys(key_hash);",
                "CREATE INDEX IF NOT EXISTS idx_api_keys_is_active ON api_keys(is_active);"
            ]
            
            for sql in indexes_sql:
                db.execute(text(sql))
            
            self.log("‚úÖ Database indexes ƒë√£ ƒë∆∞·ª£c t·∫°o")
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi t·∫°o indexes: {e}", "ERROR")
            raise
    
    def create_sample_data(self, db):
        """T·∫°o sample data ƒë·ªÉ test."""
        self.log("üìã T·∫°o sample data...")
        
        try:
            from check_cccd.models import CheckRequest, CheckMatch, ApiKey
            import uuid
            
            # T·∫°o sample API key
            api_key = ApiKey(
                key_hash="dev-api-key-hash-123",
                name="Development API Key",
                is_active=True,
                rate_limit_per_minute=100
            )
            db.add(api_key)
            
            # T·∫°o sample check request
            request = CheckRequest(
                id=uuid.uuid4(),
                cccd="025090000198",
                status="completed",
                error_message=None
            )
            db.add(request)
            db.flush()  # ƒê·ªÉ l·∫•y ID
            
            # T·∫°o sample match
            match = CheckMatch(
                request_id=request.id,
                type="person_or_company",
                name="Sample Person - ƒê·ªó Tu·∫•n Anh",
                tax_code="8575508812",
                url="https://masothue.com/8575508812-do-tuan-anh",
                address="T·ªânh / Th√†nh ph·ªë",
                role="Gi√°m ƒë·ªëc",
                raw_snippet="Sample raw snippet data..."
            )
            db.add(match)
            
            self.log("‚úÖ Sample data ƒë√£ ƒë∆∞·ª£c t·∫°o")
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi t·∫°o sample data: {e}", "ERROR")
            raise
    
    def verify_database_structure(self):
        """Ki·ªÉm tra c·∫•u tr√∫c database."""
        self.log("üîç Ki·ªÉm tra c·∫•u tr√∫c database...")
        
        try:
            # K·∫øt n·ªëi SQLite ƒë·ªÉ ki·ªÉm tra
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # L·∫•y danh s√°ch tables
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            
            self.log(f"üìä Database tables: {[table[0] for table in tables]}")
            
            # Ki·ªÉm tra c·∫•u tr√∫c t·ª´ng table
            for table in tables:
                table_name = table[0]
                cursor.execute(f"PRAGMA table_info({table_name});")
                columns = cursor.fetchall()
                
                self.log(f"üìã Table {table_name}:")
                for col in columns:
                    self.log(f"   - {col[1]} ({col[2]}) {'NOT NULL' if col[3] else 'NULL'}")
            
            conn.close()
            self.log("‚úÖ C·∫•u tr√∫c database ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra")
            return True
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi ki·ªÉm tra database: {e}", "ERROR")
            return False
    
    def start_services(self):
        """Kh·ªüi ƒë·ªông c√°c services."""
        self.log("üöÄ Kh·ªüi ƒë·ªông c√°c services...")
        
        try:
            # Import v√† start API
            from check_cccd.app import app
            import uvicorn
            
            self.log("üåê Kh·ªüi ƒë·ªông API server...")
            self.log("üìñ API Documentation: http://localhost:8000/docs")
            self.log("üîç Health Check: http://localhost:8000/health")
            self.log("üìä Metrics: http://localhost:8000/metrics")
            self.log("\n" + "="*60)
            self.log("üéâ H·ªá th·ªëng Check CCCD ƒë√£ s·∫µn s√†ng!")
            self.log("="*60 + "\n")
            
            # Start server
            uvicorn.run(
                app,
                host="0.0.0.0",
                port=8000,
                log_level="info"
            )
            
        except KeyboardInterrupt:
            self.log("\nüëã ƒêang d·ª´ng h·ªá th·ªëng...")
        except Exception as e:
            self.log(f"‚ùå L·ªói khi kh·ªüi ƒë·ªông services: {e}", "ERROR")
    
    def run_setup(self):
        """Ch·∫°y to√†n b·ªô qu√° tr√¨nh setup."""
        self.log("="*60)
        self.log("üîç Check CCCD - Automated Setup & Run")
        self.log("="*60)
        
        # Ki·ªÉm tra Python version
        if not self.check_python_version():
            return False
        
        # C√†i ƒë·∫∑t dependencies
        if not self.install_dependencies():
            return False
        
        # Thi·∫øt l·∫≠p environment
        if not self.setup_environment():
            return False
        
        # T·∫°o database schema
        if not self.create_database_schema():
            return False
        
        # Ki·ªÉm tra c·∫•u tr√∫c database
        if not self.verify_database_structure():
            return False
        
        # Kh·ªüi ƒë·ªông services
        self.start_services()
        
        return True

def main():
    """Main function."""
    setup = CheckCCCDFSetup()
    
    try:
        success = setup.run_setup()
        if success:
            print("\n‚úÖ Setup ho√†n t·∫•t th√†nh c√¥ng!")
        else:
            print("\n‚ùå Setup th·∫•t b·∫°i!")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüëã Setup b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
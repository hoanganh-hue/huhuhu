#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Module 7 Wrapper - T√≠ch h·ª£p Advanced API Client v·ªõi modules hi·ªán c√≥
Cung c·∫•p interface ƒë∆°n gi·∫£n ƒë·ªÉ c√°c module kh√°c s·ª≠ d·ª•ng
"""

import asyncio
import json
from typing import Dict, List, Any, Optional
from datetime import datetime
import logging

from .module_7_advanced_api_client import AdvancedAPIClient, RequestResult, RequestStatus

logger = logging.getLogger(__name__)

class Module7Wrapper:
    """Wrapper ƒë·ªÉ t√≠ch h·ª£p Advanced API Client v·ªõi modules hi·ªán c√≥"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.client = None
        
        # C·∫•u h√¨nh t·ª´ config
        self.timeout = config.get('timeout', 30)
        self.max_retries = config.get('max_retries', 3)
        self.proxy_file = config.get('proxy_file', 'config/proxies.txt')
        self.proxy_strategy = config.get('proxy_strategy', 'random')
        self.enable_dynamic_data = config.get('enable_dynamic_data', True)
        
        logger.info("‚úÖ Module 7 Wrapper kh·ªüi t·∫°o th√†nh c√¥ng")
    
    async def __aenter__(self):
        """Async context manager entry"""
        self.client = AdvancedAPIClient(
            timeout=self.timeout,
            max_retries=self.max_retries,
            proxy_file=self.proxy_file,
            proxy_strategy=self.proxy_strategy,
            enable_dynamic_data=self.enable_dynamic_data
        )
        await self.client.__aenter__()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.client:
            await self.client.__aexit__(exc_type, exc_val, exc_tb)
    
    async def check_cccd_with_proxy(self, cccd: str) -> Dict[str, Any]:
        """Ki·ªÉm tra CCCD v·ªõi proxy rotation"""
        logger.info(f"üîç Ki·ªÉm tra CCCD {cccd} v·ªõi proxy rotation")
        
        # Payload cho masothue.com
        payload = {
            "q": cccd,
            "type": "personal"
        }
        
        # Headers cho masothue.com
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Referer': 'https://masothue.com/tra-cuu-ma-so-thue-ca-nhan/',
            'Origin': 'https://masothue.com'
        }
        
        try:
            # Th·ª≠ GET request tr∆∞·ªõc
            result = await self.client.request(
                method="GET",
                url="https://masothue.com/tra-cuu-ma-so-thue-ca-nhan/",
                headers=headers
            )
            
            if result.status == RequestStatus.SUCCESS:
                logger.info("‚úÖ Truy c·∫≠p trang t√¨m ki·∫øm th√†nh c√¥ng")
                
                # Th·ª≠ POST request
                result = await self.client.request(
                    method="POST",
                    url="https://masothue.com/Search/",
                    json_body=payload,
                    headers=headers
                )
                
                if result.status == RequestStatus.SUCCESS:
                    logger.info("‚úÖ T√¨m ki·∫øm CCCD th√†nh c√¥ng")
                    return self._parse_cccd_result(result, cccd)
                else:
                    logger.warning(f"‚ö†Ô∏è T√¨m ki·∫øm CCCD th·∫•t b·∫°i: {result.error_message}")
                    return self._create_fallback_result(cccd, result)
            else:
                logger.warning(f"‚ö†Ô∏è Truy c·∫≠p trang t√¨m ki·∫øm th·∫•t b·∫°i: {result.error_message}")
                return self._create_fallback_result(cccd, result)
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ki·ªÉm tra CCCD: {str(e)}")
            return {
                "cccd": cccd,
                "status": "error",
                "message": f"L·ªói h·ªá th·ªëng: {str(e)}",
                "profiles": [],
                "timestamp": datetime.now().isoformat(),
                "proxy_used": None,
                "processing_time": 0.0
            }
    
    async def check_enterprise_with_proxy(self, enterprise_id: str) -> Dict[str, Any]:
        """Ki·ªÉm tra doanh nghi·ªáp v·ªõi proxy rotation"""
        logger.info(f"üè¢ Ki·ªÉm tra doanh nghi·ªáp {enterprise_id} v·ªõi proxy rotation")
        
        # Payload cho thongtindoanhnghiep.co
        payload = {
            "id": enterprise_id,
            "type": "enterprise"
        }
        
        try:
            result = await self.client.request(
                method="GET",
                url=f"https://thongtindoanhnghiep.co/api/company/{enterprise_id}",
                json_body=payload
            )
            
            if result.status == RequestStatus.SUCCESS:
                logger.info("‚úÖ T√¨m ki·∫øm doanh nghi·ªáp th√†nh c√¥ng")
                return self._parse_enterprise_result(result, enterprise_id)
            else:
                logger.warning(f"‚ö†Ô∏è T√¨m ki·∫øm doanh nghi·ªáp th·∫•t b·∫°i: {result.error_message}")
                return self._create_fallback_result(enterprise_id, result)
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ki·ªÉm tra doanh nghi·ªáp: {str(e)}")
            return {
                "enterprise_id": enterprise_id,
                "status": "error",
                "message": f"L·ªói h·ªá th·ªëng: {str(e)}",
                "data": {},
                "timestamp": datetime.now().isoformat(),
                "proxy_used": None,
                "processing_time": 0.0
            }
    
    async def check_bhxh_with_proxy(self, ssn: str) -> Dict[str, Any]:
        """Ki·ªÉm tra BHXH v·ªõi proxy rotation"""
        logger.info(f"üè• Ki·ªÉm tra BHXH {ssn} v·ªõi proxy rotation")
        
        # Payload cho BHXH
        payload = {
            "ssn": ssn,
            "type": "bhxh"
        }
        
        try:
            result = await self.client.request(
                method="POST",
                url="https://api.bhxh.gov.vn/check",
                json_body=payload
            )
            
            if result.status == RequestStatus.SUCCESS:
                logger.info("‚úÖ T√¨m ki·∫øm BHXH th√†nh c√¥ng")
                return self._parse_bhxh_result(result, ssn)
            else:
                logger.warning(f"‚ö†Ô∏è T√¨m ki·∫øm BHXH th·∫•t b·∫°i: {result.error_message}")
                return self._create_fallback_result(ssn, result)
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ki·ªÉm tra BHXH: {str(e)}")
            return {
                "ssn": ssn,
                "status": "error",
                "message": f"L·ªói h·ªá th·ªëng: {str(e)}",
                "data": {},
                "timestamp": datetime.now().isoformat(),
                "proxy_used": None,
                "processing_time": 0.0
            }
    
    def _parse_cccd_result(self, result: RequestResult, cccd: str) -> Dict[str, Any]:
        """Parse k·∫øt qu·∫£ CCCD"""
        try:
            response_data = result.response_data or {}
            
            # T√¨m ki·∫øm th√¥ng tin profile trong response
            profiles = []
            
            # N·∫øu c√≥ d·ªØ li·ªáu profile
            if isinstance(response_data, dict) and "profiles" in response_data:
                profiles = response_data["profiles"]
            elif isinstance(response_data, dict) and "data" in response_data:
                profiles = response_data["data"]
            
            return {
                "cccd": cccd,
                "status": "found" if profiles else "not_found",
                "message": f"T√¨m th·∫•y {len(profiles)} k·∫øt qu·∫£" if profiles else "Kh√¥ng t√¨m th·∫•y th√¥ng tin",
                "profiles": profiles,
                "timestamp": datetime.now().isoformat(),
                "proxy_used": result.proxy_used.host if result.proxy_used else None,
                "processing_time": result.processing_time,
                "retry_count": result.retry_count
            }
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi parse k·∫øt qu·∫£ CCCD: {str(e)}")
            return self._create_fallback_result(cccd, result)
    
    def _parse_enterprise_result(self, result: RequestResult, enterprise_id: str) -> Dict[str, Any]:
        """Parse k·∫øt qu·∫£ doanh nghi·ªáp"""
        try:
            response_data = result.response_data or {}
            
            return {
                "enterprise_id": enterprise_id,
                "status": "found",
                "message": "T√¨m th·∫•y th√¥ng tin doanh nghi·ªáp",
                "data": response_data,
                "timestamp": datetime.now().isoformat(),
                "proxy_used": result.proxy_used.host if result.proxy_used else None,
                "processing_time": result.processing_time,
                "retry_count": result.retry_count
            }
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi parse k·∫øt qu·∫£ doanh nghi·ªáp: {str(e)}")
            return self._create_fallback_result(enterprise_id, result)
    
    def _parse_bhxh_result(self, result: RequestResult, ssn: str) -> Dict[str, Any]:
        """Parse k·∫øt qu·∫£ BHXH"""
        try:
            response_data = result.response_data or {}
            
            return {
                "ssn": ssn,
                "status": "found",
                "message": "T√¨m th·∫•y th√¥ng tin BHXH",
                "data": response_data,
                "timestamp": datetime.now().isoformat(),
                "proxy_used": result.proxy_used.host if result.proxy_used else None,
                "processing_time": result.processing_time,
                "retry_count": result.retry_count
            }
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi parse k·∫øt qu·∫£ BHXH: {str(e)}")
            return self._create_fallback_result(ssn, result)
    
    def _create_fallback_result(self, identifier: str, result: RequestResult) -> Dict[str, Any]:
        """T·∫°o k·∫øt qu·∫£ fallback"""
        status = "not_found"
        message = "Kh√¥ng t√¨m th·∫•y th√¥ng tin"
        
        if result.status == RequestStatus.BLOCKED:
            status = "blocked"
            message = "B·ªã ch·∫∑n b·ªüi anti-bot protection"
        elif result.status == RequestStatus.ERROR:
            status = "error"
            message = f"L·ªói: {result.error_message}"
        elif result.status == RequestStatus.PROXY_ERROR:
            status = "proxy_error"
            message = "L·ªói proxy"
        
        return {
            "identifier": identifier,
            "status": status,
            "message": message,
            "profiles": [],
            "data": {},
            "timestamp": datetime.now().isoformat(),
            "proxy_used": result.proxy_used.host if result.proxy_used else None,
            "processing_time": result.processing_time,
            "retry_count": result.retry_count,
            "error_details": result.error_message
        }
    
    def get_stats(self) -> Dict[str, Any]:
        """L·∫•y th·ªëng k√™"""
        if self.client:
            return self.client.get_stats()
        return {"error": "Client not initialized"}

# Utility functions
async def check_cccd_with_proxy(cccd: str, config: Dict[str, Any] = None) -> Dict[str, Any]:
    """Ki·ªÉm tra CCCD v·ªõi proxy (standalone function)"""
    if config is None:
        config = {}
    
    async with Module7Wrapper(config) as wrapper:
        return await wrapper.check_cccd_with_proxy(cccd)

async def check_enterprise_with_proxy(enterprise_id: str, config: Dict[str, Any] = None) -> Dict[str, Any]:
    """Ki·ªÉm tra doanh nghi·ªáp v·ªõi proxy (standalone function)"""
    if config is None:
        config = {}
    
    async with Module7Wrapper(config) as wrapper:
        return await wrapper.check_enterprise_with_proxy(enterprise_id)

async def check_bhxh_with_proxy(ssn: str, config: Dict[str, Any] = None) -> Dict[str, Any]:
    """Ki·ªÉm tra BHXH v·ªõi proxy (standalone function)"""
    if config is None:
        config = {}
    
    async with Module7Wrapper(config) as wrapper:
        return await wrapper.check_bhxh_with_proxy(ssn)

# Example usage
async def main():
    """V√≠ d·ª• s·ª≠ d·ª•ng Module 7 Wrapper"""
    
    config = {
        'timeout': 30,
        'max_retries': 3,
        'proxy_strategy': 'random',
        'enable_dynamic_data': True
    }
    
    async with Module7Wrapper(config) as wrapper:
        
        # Test CCCD
        result = await wrapper.check_cccd_with_proxy("037178000015")
        print(f"CCCD Result: {json.dumps(result, indent=2, ensure_ascii=False)}")
        
        # Test Enterprise
        result = await wrapper.check_enterprise_with_proxy("0101234567")
        print(f"Enterprise Result: {json.dumps(result, indent=2, ensure_ascii=False)}")
        
        # Test BHXH
        result = await wrapper.check_bhxh_with_proxy("0123456789")
        print(f"BHXH Result: {json.dumps(result, indent=2, ensure_ascii=False)}")
        
        # Stats
        stats = wrapper.get_stats()
        print(f"Stats: {json.dumps(stats, indent=2, ensure_ascii=False)}")

if __name__ == "__main__":
    asyncio.run(main())
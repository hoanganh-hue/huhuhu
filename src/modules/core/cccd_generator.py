#!/usr/bin/env python3
"""
Feature-1: CCCD Generator
T·∫°o s·ªë CCCD (CƒÉn c∆∞·ªõc C√¥ng d√¢n) h·ª£p l·ªá
"""

import random
import logging
from datetime import datetime
from typing import List, Dict, Any
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class CCCDData:
    """D·ªØ li·ªáu CCCD"""
    cccd: str
    province_code: str
    gender: str
    birth_year: int
    birth_date: str
    full_name: str
    address: str

class CCCDGenerator:
    """Generator t·∫°o CCCD h·ª£p l·ªá"""
    
    # M√£ t·ªânh/th√†nh ph·ªë (63 t·ªânh/th√†nh)
    PROVINCE_CODES = {
        "001": "H√† N·ªôi", "002": "TP. H·ªì Ch√≠ Minh", "003": "H·∫£i Ph√≤ng",
        "004": "ƒê√† N·∫µng", "005": "H√† Giang", "006": "Cao B·∫±ng",
        "007": "Lai Ch√¢u", "008": "L√†o Cai", "009": "Tuy√™n Quang",
        "010": "L·∫°ng S∆°n", "011": "B·∫Øc K·∫°n", "012": "Th√°i Nguy√™n",
        "013": "Y√™n B√°i", "014": "S∆°n La", "015": "Ph√∫ Th·ªç",
        "016": "Vƒ©nh Ph√∫c", "017": "B·∫Øc Ninh", "018": "Qu·∫£ng Ninh",
        "019": "B·∫Øc Giang", "020": "L·∫°ng S∆°n", "021": "H√† Nam",
        "022": "H·∫£i D∆∞∆°ng", "023": "H∆∞ng Y√™n", "024": "Th√°i B√¨nh",
        "025": "H√† Tƒ©nh", "026": "Qu·∫£ng B√¨nh", "027": "Qu·∫£ng Tr·ªã",
        "028": "Th·ª´a Thi√™n Hu·∫ø", "029": "Qu·∫£ng Nam", "030": "Qu·∫£ng Ng√£i",
        "031": "B√¨nh ƒê·ªãnh", "032": "Ph√∫ Y√™n", "033": "Kh√°nh H√≤a",
        "034": "Ninh Thu·∫≠n", "035": "B√¨nh Thu·∫≠n", "036": "Kon Tum",
        "037": "Gia Lai", "038": "ƒê·∫Øk L·∫Øk", "039": "ƒê·∫Øk N√¥ng",
        "040": "L√¢m ƒê·ªìng", "041": "B√¨nh Ph∆∞·ªõc", "042": "T√¢y Ninh",
        "043": "B√¨nh D∆∞∆°ng", "044": "ƒê·ªìng Nai", "045": "B√† R·ªãa - V≈©ng T√†u",
        "046": "Long An", "047": "Ti·ªÅn Giang", "048": "B·∫øn Tre",
        "049": "Tr√† Vinh", "050": "Vƒ©nh Long", "051": "ƒê·ªìng Th√°p",
        "052": "An Giang", "053": "Ki√™n Giang", "054": "C·∫ßn Th∆°",
        "055": "H·∫≠u Giang", "056": "S√≥c TrƒÉng", "057": "B·∫°c Li√™u",
        "058": "C√† Mau", "059": "ƒêi·ªán Bi√™n", "060": "Lai Ch√¢u",
        "061": "S∆°n La", "062": "Y√™n B√°i", "063": "Ho√† B√¨nh"
    }
    
    # Danh s√°ch h·ªç t√™n ph·ªï bi·∫øn
    FIRST_NAMES = [
        "Nguy·ªÖn", "Tr·∫ßn", "L√™", "Ph·∫°m", "Ho√†ng", "Phan", "V≈©", "V√µ",
        "ƒê·∫∑ng", "B√πi", "ƒê·ªó", "H·ªì", "Ng√¥", "D∆∞∆°ng", "L√Ω", "ƒêinh"
    ]
    
    MIDDLE_NAMES = [
        "VƒÉn", "Th·ªã", "ƒê·ª©c", "Minh", "Quang", "H·ªØu", "C√¥ng", "ƒê√¨nh",
        "Xu√¢n", "Thu", "H·∫°", "ƒê√¥ng", "Thanh", "B√¨nh", "H√≤a", "An"
    ]
    
    LAST_NAMES = [
        "An", "B√¨nh", "C∆∞·ªùng", "D≈©ng", "ƒê·ª©c", "Giang", "H·∫£i", "Ho√†ng",
        "H√πng", "Kh√°nh", "Linh", "Minh", "Nam", "Phong", "Quang", "S∆°n",
        "Th√†nh", "Tu·∫•n", "Vi·ªát", "Xu√¢n", "Y·∫øn", "H∆∞∆°ng", "Lan", "Mai",
        "Nga", "Oanh", "Ph∆∞∆°ng", "Qu·ª≥nh", "Th·∫£o", "Uy√™n", "V√¢n", "Xoan"
    ]
    
    # ƒê·ªãa ch·ªâ theo t·ªânh
    ADDRESSES = {
        "001": "H√† N·ªôi", "002": "TP. H·ªì Ch√≠ Minh", "003": "H·∫£i Ph√≤ng",
        "004": "ƒê√† N·∫µng", "005": "H√† Giang", "006": "Cao B·∫±ng",
        "007": "Lai Ch√¢u", "008": "L√†o Cai", "009": "Tuy√™n Quang",
        "010": "L·∫°ng S∆°n", "011": "B·∫Øc K·∫°n", "012": "Th√°i Nguy√™n",
        "013": "Y√™n B√°i", "014": "S∆°n La", "015": "Ph√∫ Th·ªç",
        "016": "Vƒ©nh Ph√∫c", "017": "B·∫Øc Ninh", "018": "Qu·∫£ng Ninh",
        "019": "B·∫Øc Giang", "020": "L·∫°ng S∆°n", "021": "H√† Nam",
        "022": "H·∫£i D∆∞∆°ng", "023": "H∆∞ng Y√™n", "024": "Th√°i B√¨nh",
        "025": "H√† Tƒ©nh", "026": "Qu·∫£ng B√¨nh", "027": "Qu·∫£ng Tr·ªã",
        "028": "Th·ª´a Thi√™n Hu·∫ø", "029": "Qu·∫£ng Nam", "030": "Qu·∫£ng Ng√£i",
        "031": "B√¨nh ƒê·ªãnh", "032": "Ph√∫ Y√™n", "033": "Kh√°nh H√≤a",
        "034": "Ninh Thu·∫≠n", "035": "B√¨nh Thu·∫≠n", "036": "Kon Tum",
        "037": "Gia Lai", "038": "ƒê·∫Øk L·∫Øk", "039": "ƒê·∫Øk N√¥ng",
        "040": "L√¢m ƒê·ªìng", "041": "B√¨nh Ph∆∞·ªõc", "042": "T√¢y Ninh",
        "043": "B√¨nh D∆∞∆°ng", "044": "ƒê·ªìng Nai", "045": "B√† R·ªãa - V≈©ng T√†u",
        "046": "Long An", "047": "Ti·ªÅn Giang", "048": "B·∫øn Tre",
        "049": "Tr√† Vinh", "050": "Vƒ©nh Long", "051": "ƒê·ªìng Th√°p",
        "052": "An Giang", "053": "Ki√™n Giang", "054": "C·∫ßn Th∆°",
        "055": "H·∫≠u Giang", "056": "S√≥c TrƒÉng", "057": "B·∫°c Li√™u",
        "058": "C√† Mau", "059": "ƒêi·ªán Bi√™n", "060": "Lai Ch√¢u",
        "061": "S∆°n La", "062": "Y√™n B√°i", "063": "Ho√† B√¨nh"
    }
    
    def __init__(self, config: Dict[str, Any]):
        """Kh·ªüi t·∫°o generator"""
        self.config = config
        self.count = config.get('cccd_count', 1000)
        self.province_code = config.get('province_code', '001')
        self.gender = config.get('gender', 'Nam')
        self.birth_year_from = config.get('birth_year_from', 1990)
        self.birth_year_to = config.get('birth_year_to', 2000)
        
        logger.info("‚úÖ CCCD Generator initialized")
        logger.info(f"üìä Count: {self.count}")
        logger.info(f"üèõÔ∏è Province: {self.PROVINCE_CODES.get(self.province_code, 'Unknown')}")
        logger.info(f"üë§ Gender: {self.gender}")
        logger.info(f"üìÖ Birth year range: {self.birth_year_from}-{self.birth_year_to}")
    
    def generate_cccd(self) -> str:
        """T·∫°o s·ªë CCCD h·ª£p l·ªá"""
        # C·∫•u tr√∫c: 12 ch·ªØ s·ªë
        # 3 ch·ªØ s·ªë ƒë·∫ßu: m√£ t·ªânh/th√†nh ph·ªë
        # 1 ch·ªØ s·ªë: gi·ªõi t√≠nh (nam: 0-4, n·ªØ: 5-9)
        # 2 ch·ªØ s·ªë: nƒÉm sinh (2 ch·ªØ s·ªë cu·ªëi)
        # 6 ch·ªØ s·ªë: s·ªë th·ª© t·ª±
        
        # M√£ t·ªânh/th√†nh ph·ªë
        province_part = self.province_code
        
        # Gi·ªõi t√≠nh
        if self.gender == "Nam":
            gender_part = str(random.randint(0, 4))
        else:
            gender_part = str(random.randint(5, 9))
        
        # NƒÉm sinh
        birth_year = random.randint(self.birth_year_from, self.birth_year_to)
        year_part = str(birth_year)[-2:]
        
        # S·ªë th·ª© t·ª± (6 ch·ªØ s·ªë)
        sequence_part = str(random.randint(100000, 999999))
        
        # Gh√©p th√†nh CCCD
        cccd = province_part + gender_part + year_part + sequence_part
        
        return cccd
    
    def generate_name(self, gender: str) -> str:
        """T·∫°o t√™n ƒë·∫ßy ƒë·ªß"""
        first_name = random.choice(self.FIRST_NAMES)
        middle_name = random.choice(self.MIDDLE_NAMES)
        last_name = random.choice(self.LAST_NAMES)
        
        return f"{first_name} {middle_name} {last_name}"
    
    def generate_birth_date(self, birth_year: int) -> str:
        """T·∫°o ng√†y sinh"""
        month = random.randint(1, 12)
        day = random.randint(1, 28)  # ƒê∆°n gi·∫£n h√≥a, l·∫•y 28 ƒë·ªÉ tr√°nh l·ªói th√°ng
        
        return f"{birth_year:04d}-{month:02d}-{day:02d}"
    
    def generate_address(self, province_code: str) -> str:
        """T·∫°o ƒë·ªãa ch·ªâ"""
        province_name = self.ADDRESSES.get(province_code, "H√† N·ªôi")
        street_number = random.randint(1, 999)
        street_name = random.choice([
            "ƒê∆∞·ªùng L√™ L·ª£i", "ƒê∆∞·ªùng Tr·∫ßn H∆∞ng ƒê·∫°o", "ƒê∆∞·ªùng Nguy·ªÖn Du",
            "ƒê∆∞·ªùng L√Ω Th∆∞·ªùng Ki·ªát", "ƒê∆∞·ªùng Hai B√† Tr∆∞ng", "ƒê∆∞·ªùng Quang Trung"
        ])
        
        return f"{street_number} {street_name}, {province_name}"
    
    def generate_cccd_data(self) -> CCCDData:
        """T·∫°o d·ªØ li·ªáu CCCD ƒë·∫ßy ƒë·ªß"""
        cccd = self.generate_cccd()
        birth_year = random.randint(self.birth_year_from, self.birth_year_to)
        full_name = self.generate_name(self.gender)
        birth_date = self.generate_birth_date(birth_year)
        address = self.generate_address(self.province_code)
        
        return CCCDData(
            cccd=cccd,
            province_code=self.province_code,
            gender=self.gender,
            birth_year=birth_year,
            birth_date=birth_date,
            full_name=full_name,
            address=address
        )
    
    def generate_batch(self) -> List[CCCDData]:
        """T·∫°o batch CCCD"""
        logger.info(f"üî¢ Generating {self.count} CCCD records...")
        
        cccd_list = []
        for i in range(self.count):
            cccd_data = self.generate_cccd_data()
            cccd_list.append(cccd_data)
            
            if (i + 1) % 100 == 0:
                logger.info(f"üìä Generated {i + 1}/{self.count} CCCD records")
        
        logger.info(f"‚úÖ Generated {len(cccd_list)} CCCD records successfully")
        return cccd_list
    
    def save_to_file(self, cccd_list: List[CCCDData], filename: str = "cccd_data.txt"):
        """L∆∞u d·ªØ li·ªáu CCCD ra file"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("CCCD\tProvince\tGender\tBirth Year\tBirth Date\tFull Name\tAddress\n")
                for cccd_data in cccd_list:
                    f.write(f"{cccd_data.cccd}\t{cccd_data.province_code}\t{cccd_data.gender}\t"
                           f"{cccd_data.birth_year}\t{cccd_data.birth_date}\t"
                           f"{cccd_data.full_name}\t{cccd_data.address}\n")
            
            logger.info(f"üíæ Saved {len(cccd_list)} CCCD records to {filename}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error saving CCCD data: {e}")
            return False

def main():
    """Test function"""
    config = {
        'cccd_count': 10,
        'province_code': '001',
        'gender': 'Nam',
        'birth_year_from': 1990,
        'birth_year_to': 2000
    }
    
    generator = CCCDGenerator(config)
    cccd_list = generator.generate_batch()
    
    print("K·∫æT QU·∫¢ T·∫†O CCCD:")
    print("=" * 80)
    for i, cccd_data in enumerate(cccd_list, 1):
        print(f"{i:2d}. {cccd_data.cccd} | {cccd_data.full_name} | {cccd_data.birth_date} | {cccd_data.address}")

if __name__ == "__main__":
    main()
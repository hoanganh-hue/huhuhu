#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ph√¢n t√≠ch t·ª∑ l·ªá ph√¢n b·ªë CCCD theo d·ªØ li·ªáu th·ª±c t·∫ø
Ki·ªÉm tra t√≠nh ch√≠nh x√°c v√† ph√π h·ª£p v·ªõi th·ªëng k√™ Vi·ªát Nam
"""

import sys
import os
import random
import json
from collections import Counter, defaultdict
from typing import Dict, List, Any, Tuple

# Add cccd directory to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'cccd'))

def get_vietnam_real_statistics():
    """L·∫•y th·ªëng k√™ th·ª±c t·∫ø c·ªßa Vi·ªát Nam"""
    return {
        # D√¢n s·ªë theo v√πng mi·ªÅn (2023)
        "population_by_region": {
            "Mi·ªÅn B·∫Øc": 0.35,  # ~35% d√¢n s·ªë
            "Mi·ªÅn Trung": 0.20,  # ~20% d√¢n s·ªë  
            "Mi·ªÅn Nam": 0.45   # ~45% d√¢n s·ªë
        },
        
        # T·ª∑ l·ªá gi·ªõi t√≠nh (2023)
        "gender_ratio": {
            "Nam": 0.49,  # ~49%
            "N·ªØ": 0.51   # ~51%
        },
        
        # Ph√¢n b·ªë d√¢n s·ªë theo ƒë·ªô tu·ªïi (2023)
        "age_distribution": {
            "0-17": 0.25,   # 25% tr·∫ª em/v·ªã th√†nh ni√™n
            "18-30": 0.20,  # 20% thanh ni√™n
            "31-45": 0.25,  # 25% trung ni√™n
            "46-60": 0.20,  # 20% cao tu·ªïi
            "61+": 0.10     # 10% ng∆∞·ªùi gi√†
        },
        
        # C√°c t·ªânh th√†nh ƒë√¥ng d√¢n nh·∫•t
        "top_populated_provinces": {
            "079": 0.12,  # TP.HCM - 12% d√¢n s·ªë
            "001": 0.08,  # H√† N·ªôi - 8% d√¢n s·ªë
            "075": 0.04,  # ƒê·ªìng Nai - 4% d√¢n s·ªë
            "074": 0.03,  # B√¨nh D∆∞∆°ng - 3% d√¢n s·ªë
            "031": 0.03,  # H·∫£i Ph√≤ng - 3% d√¢n s·ªë
            "092": 0.02,  # C·∫ßn Th∆° - 2% d√¢n s·ªë
            "048": 0.02,  # ƒê√† N·∫µng - 2% d√¢n s·ªë
        },
        
        # Ph√¢n b·ªë nƒÉm sinh th·ª±c t·∫ø (d·ª±a tr√™n c·∫•u tr√∫c d√¢n s·ªë)
        "birth_year_distribution": {
            "1990-1999": 0.25,  # Th·∫ø h·ªá 8X-9X
            "2000-2009": 0.30,  # Th·∫ø h·ªá 2K
            "2010-2019": 0.25,  # Th·∫ø h·ªá 2K1
            "2020-2023": 0.20   # Th·∫ø h·ªá 2K2+
        }
    }

def analyze_current_generator_distribution():
    """Ph√¢n t√≠ch ph√¢n b·ªë c·ªßa generator hi·ªán t·∫°i"""
    print("üîç Ph√¢n t√≠ch ph√¢n b·ªë c·ªßa Generator hi·ªán t·∫°i")
    print("=" * 60)
    
    # Test v·ªõi Enhanced Generator
    try:
        from cccd_generator_enhanced import CCCDGeneratorEnhanced
        
        generator = CCCDGeneratorEnhanced()
        
        # T·∫°o 1000 CCCD ƒë·ªÉ ph√¢n t√≠ch
        result = generator.generate_cccd_list_enhanced(
            province_codes=None,  # T·∫•t c·∫£ t·ªânh
            gender=None,  # Random
            birth_year_range=(1990, 2023),
            quantity=1000
        )
        
        if result["success"]:
            data = result["data"]
            valid_data = [item for item in data if item.get("valid", False)]
            
            print(f"‚úÖ Generated {len(valid_data)} valid CCCD for analysis")
            
            # Ph√¢n t√≠ch theo t·ªânh th√†nh
            province_dist = Counter()
            region_dist = Counter()
            gender_dist = Counter()
            age_group_dist = Counter()
            birth_year_dist = Counter()
            
            for item in valid_data:
                # T·ªânh th√†nh
                province_code = item["province_code"]
                province_dist[province_code] += 1
                
                # V√πng mi·ªÅn
                province_name = item["province_name"]
                if "H√† N·ªôi" in province_name or "H·∫£i Ph√≤ng" in province_name:
                    region_dist["Mi·ªÅn B·∫Øc"] += 1
                elif "TP.HCM" in province_name or "C·∫ßn Th∆°" in province_name:
                    region_dist["Mi·ªÅn Nam"] += 1
                else:
                    # C·∫ßn mapping ch√≠nh x√°c h∆°n
                    region_dist["Mi·ªÅn Trung"] += 1
                
                # Gi·ªõi t√≠nh
                gender = item["gender"]
                gender_dist[gender] += 1
                
                # NƒÉm sinh
                birth_year = item["birth_year"]
                birth_year_dist[birth_year] += 1
                
                # Nh√≥m tu·ªïi
                current_year = 2024
                age = current_year - birth_year
                if age <= 17:
                    age_group_dist["0-17"] += 1
                elif age <= 30:
                    age_group_dist["18-30"] += 1
                elif age <= 45:
                    age_group_dist["31-45"] += 1
                elif age <= 60:
                    age_group_dist["46-60"] += 1
                else:
                    age_group_dist["61+"] += 1
            
            return {
                "province_distribution": dict(province_dist),
                "region_distribution": dict(region_dist),
                "gender_distribution": dict(gender_dist),
                "age_group_distribution": dict(age_group_dist),
                "birth_year_distribution": dict(birth_year_dist),
                "total_samples": len(valid_data)
            }
        else:
            print(f"‚ùå Error generating CCCD: {result.get('error')}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error analyzing generator: {e}")
        return None

def compare_with_real_statistics(generator_stats: Dict, real_stats: Dict):
    """So s√°nh v·ªõi th·ªëng k√™ th·ª±c t·∫ø"""
    print("\nüìä So s√°nh v·ªõi th·ªëng k√™ th·ª±c t·∫ø")
    print("=" * 60)
    
    total_samples = generator_stats["total_samples"]
    
    # So s√°nh t·ª∑ l·ªá gi·ªõi t√≠nh
    print("üë• T·ª∑ l·ªá gi·ªõi t√≠nh:")
    print("-" * 30)
    real_gender = real_stats["gender_ratio"]
    gen_gender = generator_stats["gender_distribution"]
    
    for gender in ["Nam", "N·ªØ"]:
        real_ratio = real_gender.get(gender, 0) * 100
        gen_count = gen_gender.get(gender, 0)
        gen_ratio = (gen_count / total_samples) * 100 if total_samples > 0 else 0
        
        diff = abs(gen_ratio - real_ratio)
        status = "‚úÖ" if diff < 5 else "‚ö†Ô∏è" if diff < 10 else "‚ùå"
        
        print(f"{status} {gender}: Th·ª±c t·∫ø {real_ratio:.1f}% | Generator {gen_ratio:.1f}% | Ch√™nh l·ªách {diff:.1f}%")
    
    # So s√°nh ph√¢n b·ªë tu·ªïi
    print("\nüìÖ Ph√¢n b·ªë nh√≥m tu·ªïi:")
    print("-" * 30)
    real_age = real_stats["age_distribution"]
    gen_age = generator_stats["age_group_distribution"]
    
    for age_group in ["0-17", "18-30", "31-45", "46-60", "61+"]:
        real_ratio = real_age.get(age_group, 0) * 100
        gen_count = gen_age.get(age_group, 0)
        gen_ratio = (gen_count / total_samples) * 100 if total_samples > 0 else 0
        
        diff = abs(gen_ratio - real_ratio)
        status = "‚úÖ" if diff < 5 else "‚ö†Ô∏è" if diff < 10 else "‚ùå"
        
        print(f"{status} {age_group}: Th·ª±c t·∫ø {real_ratio:.1f}% | Generator {gen_ratio:.1f}% | Ch√™nh l·ªách {diff:.1f}%")
    
    # So s√°nh ph√¢n b·ªë v√πng mi·ªÅn
    print("\nüó∫Ô∏è Ph√¢n b·ªë v√πng mi·ªÅn:")
    print("-" * 30)
    real_region = real_stats["population_by_region"]
    gen_region = generator_stats["region_distribution"]
    
    for region in ["Mi·ªÅn B·∫Øc", "Mi·ªÅn Trung", "Mi·ªÅn Nam"]:
        real_ratio = real_region.get(region, 0) * 100
        gen_count = gen_region.get(region, 0)
        gen_ratio = (gen_count / total_samples) * 100 if total_samples > 0 else 0
        
        diff = abs(gen_ratio - real_ratio)
        status = "‚úÖ" if diff < 5 else "‚ö†Ô∏è" if diff < 10 else "‚ùå"
        
        print(f"{status} {region}: Th·ª±c t·∫ø {real_ratio:.1f}% | Generator {gen_ratio:.1f}% | Ch√™nh l·ªách {diff:.1f}%")

def analyze_province_distribution(generator_stats: Dict, real_stats: Dict):
    """Ph√¢n t√≠ch ph√¢n b·ªë t·ªânh th√†nh chi ti·∫øt"""
    print("\nüèôÔ∏è Ph√¢n t√≠ch ph√¢n b·ªë t·ªânh th√†nh")
    print("=" * 60)
    
    total_samples = generator_stats["total_samples"]
    province_dist = generator_stats["province_distribution"]
    top_provinces = real_stats["top_populated_provinces"]
    
    print("Top 10 t·ªânh th√†nh ƒë∆∞·ª£c t·∫°o nhi·ªÅu nh·∫•t:")
    print("-" * 40)
    
    # S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng
    sorted_provinces = sorted(province_dist.items(), key=lambda x: x[1], reverse=True)
    
    for i, (province_code, count) in enumerate(sorted_provinces[:10]):
        ratio = (count / total_samples) * 100
        expected_ratio = top_provinces.get(province_code, 0) * 100
        
        if expected_ratio > 0:
            diff = abs(ratio - expected_ratio)
            status = "‚úÖ" if diff < 2 else "‚ö†Ô∏è" if diff < 5 else "‚ùå"
            print(f"{status} {i+1:2d}. {province_code}: {count:3d} ({ratio:4.1f}%) | Th·ª±c t·∫ø: {expected_ratio:4.1f}%")
        else:
            print(f"‚ÑπÔ∏è  {i+1:2d}. {province_code}: {count:3d} ({ratio:4.1f}%) | Th·ª±c t·∫ø: <1%")

def create_realistic_generator():
    """T·∫°o generator v·ªõi t·ª∑ l·ªá ph√¢n b·ªë th·ª±c t·∫ø"""
    print("\nüéØ T·∫°o Generator v·ªõi t·ª∑ l·ªá ph√¢n b·ªë th·ª±c t·∫ø")
    print("=" * 60)
    
    real_stats = get_vietnam_real_statistics()
    
    # T·∫°o generator v·ªõi weighted random
    class RealisticCCCDGenerator:
        def __init__(self):
            self.real_stats = real_stats
            
        def generate_realistic_cccd(self, quantity: int = 1000):
            """T·∫°o CCCD v·ªõi t·ª∑ l·ªá ph√¢n b·ªë th·ª±c t·∫ø"""
            results = []
            
            # Mapping t·ªânh th√†nh theo v√πng mi·ªÅn
            province_mapping = {
                "Mi·ªÅn B·∫Øc": ["001", "002", "004", "006", "008", "010", "011", "012", "014", "015", 
                            "017", "019", "020", "022", "024", "025", "026", "027", "030", "031", 
                            "033", "034", "035", "036", "037", "038", "040", "042"],
                "Mi·ªÅn Trung": ["044", "045", "046", "048", "049", "051", "052", "054", "056", "058", 
                              "060", "062", "064", "066", "067", "068"],
                "Mi·ªÅn Nam": ["070", "072", "074", "075", "077", "079", "080", "082", "083", "084", 
                            "086", "087", "089", "091", "092", "093", "094", "095", "096"]
            }
            
            # T·∫°o CCCD v·ªõi t·ª∑ l·ªá th·ª±c t·∫ø
            for _ in range(quantity):
                # Ch·ªçn v√πng mi·ªÅn theo t·ª∑ l·ªá th·ª±c t·∫ø
                region = random.choices(
                    list(real_stats["population_by_region"].keys()),
                    weights=list(real_stats["population_by_region"].values())
                )[0]
                
                # Ch·ªçn t·ªânh trong v√πng mi·ªÅn
                province_code = random.choice(province_mapping[region])
                
                # Ch·ªçn gi·ªõi t√≠nh theo t·ª∑ l·ªá th·ª±c t·∫ø
                gender = random.choices(
                    list(real_stats["gender_ratio"].keys()),
                    weights=list(real_stats["gender_ratio"].values())
                )[0]
                
                # Ch·ªçn nƒÉm sinh theo t·ª∑ l·ªá th·ª±c t·∫ø
                birth_year_range = random.choices(
                    list(real_stats["birth_year_distribution"].keys()),
                    weights=list(real_stats["birth_year_distribution"].values())
                )[0]
                
                # Parse nƒÉm sinh
                start_year, end_year = map(int, birth_year_range.split('-'))
                birth_year = random.randint(start_year, end_year)
                
                # T·∫°o CCCD (simplified)
                gender_century_code = 0 if gender == "Nam" else 1
                year_code = str(birth_year % 100).zfill(2)
                month_code = str(random.randint(1, 12)).zfill(2)
                day_code = str(random.randint(1, 28)).zfill(2)
                sequence_code = str(random.randint(1, 99)).zfill(2)
                
                cccd = f"{province_code}{gender_century_code}{year_code}{month_code}{day_code}{sequence_code}"
                
                results.append({
                    "cccd_number": cccd,
                    "province_code": province_code,
                    "region": region,
                    "gender": gender,
                    "birth_year": birth_year,
                    "birth_year_range": birth_year_range
                })
            
            return results
    
    # Test realistic generator
    realistic_gen = RealisticCCCDGenerator()
    realistic_data = realistic_gen.generate_realistic_cccd(1000)
    
    # Ph√¢n t√≠ch k·∫øt qu·∫£
    print("üìä Ph√¢n t√≠ch Generator th·ª±c t·∫ø:")
    print("-" * 40)
    
    # Ph√¢n t√≠ch v√πng mi·ªÅn
    region_count = Counter(item["region"] for item in realistic_data)
    print("V√πng mi·ªÅn:")
    for region, count in region_count.items():
        ratio = (count / len(realistic_data)) * 100
        expected = real_stats["population_by_region"][region] * 100
        diff = abs(ratio - expected)
        status = "‚úÖ" if diff < 3 else "‚ö†Ô∏è"
        print(f"  {status} {region}: {ratio:.1f}% (th·ª±c t·∫ø: {expected:.1f}%)")
    
    # Ph√¢n t√≠ch gi·ªõi t√≠nh
    gender_count = Counter(item["gender"] for item in realistic_data)
    print("\nGi·ªõi t√≠nh:")
    for gender, count in gender_count.items():
        ratio = (count / len(realistic_data)) * 100
        expected = real_stats["gender_ratio"][gender] * 100
        diff = abs(ratio - expected)
        status = "‚úÖ" if diff < 3 else "‚ö†Ô∏è"
        print(f"  {status} {gender}: {ratio:.1f}% (th·ª±c t·∫ø: {expected:.1f}%)")
    
    # Ph√¢n t√≠ch nƒÉm sinh
    year_range_count = Counter(item["birth_year_range"] for item in realistic_data)
    print("\nNƒÉm sinh:")
    for year_range, count in year_range_count.items():
        ratio = (count / len(realistic_data)) * 100
        expected = real_stats["birth_year_distribution"][year_range] * 100
        diff = abs(ratio - expected)
        status = "‚úÖ" if diff < 3 else "‚ö†Ô∏è"
        print(f"  {status} {year_range}: {ratio:.1f}% (th·ª±c t·∫ø: {expected:.1f}%)")

def main():
    """Main function"""
    print("üöÄ Ph√¢n t√≠ch t√≠nh ch√≠nh x√°c v√† ph√π h·ª£p v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø")
    print("=" * 70)
    
    # L·∫•y th·ªëng k√™ th·ª±c t·∫ø
    real_stats = get_vietnam_real_statistics()
    print("üìà Th·ªëng k√™ th·ª±c t·∫ø Vi·ªát Nam (2023):")
    print(f"  - D√¢n s·ªë theo v√πng: B·∫Øc {real_stats['population_by_region']['Mi·ªÅn B·∫Øc']*100:.0f}%, Trung {real_stats['population_by_region']['Mi·ªÅn Trung']*100:.0f}%, Nam {real_stats['population_by_region']['Mi·ªÅn Nam']*100:.0f}%")
    print(f"  - T·ª∑ l·ªá gi·ªõi t√≠nh: Nam {real_stats['gender_ratio']['Nam']*100:.0f}%, N·ªØ {real_stats['gender_ratio']['N·ªØ']*100:.0f}%")
    print(f"  - Ph√¢n b·ªë tu·ªïi: Tr·∫ª em {real_stats['age_distribution']['0-17']*100:.0f}%, Thanh ni√™n {real_stats['age_distribution']['18-30']*100:.0f}%, Trung ni√™n {real_stats['age_distribution']['31-45']*100:.0f}%")
    
    # Ph√¢n t√≠ch generator hi·ªán t·∫°i
    generator_stats = analyze_current_generator_distribution()
    
    if generator_stats:
        # So s√°nh v·ªõi th·ªëng k√™ th·ª±c t·∫ø
        compare_with_real_statistics(generator_stats, real_stats)
        
        # Ph√¢n t√≠ch t·ªânh th√†nh chi ti·∫øt
        analyze_province_distribution(generator_stats, real_stats)
        
        # T·∫°o generator th·ª±c t·∫ø
        create_realistic_generator()
        
        print("\nüéØ K·∫æT LU·∫¨N:")
        print("=" * 30)
        print("‚úÖ Generator hi·ªán t·∫°i t·∫°o CCCD ng·∫´u nhi√™n ƒë·ªÅu")
        print("‚ö†Ô∏è  Kh√¥ng ph·∫£n √°nh t·ª∑ l·ªá ph√¢n b·ªë th·ª±c t·∫ø")
        print("üí° C·∫ßn t·∫°o generator v·ªõi weighted random")
        print("üöÄ Generator th·ª±c t·∫ø ƒë√£ ƒë∆∞·ª£c t·∫°o v√† test")
    else:
        print("‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch generator hi·ªán t·∫°i")

if __name__ == "__main__":
    main()
import asyncio
from collections import Counter
import sys
import os

# Th√™m c√°c ƒë∆∞·ªùng d·∫´n c·∫ßn thi·∫øt v√†o Python path m·ªôt c√°ch ch√≠nh x√°c
sys.path.insert(0, os.path.abspath('/Users/nguyenduchung1993/Downloads/tools-data-bhxh/bhxh-tool-enhanced-python'))
sys.path.insert(0, os.path.abspath('/Users/nguyenduchung1993/Downloads/tools-data-bhxh'))

from services.excel_service import ExcelService
from cccd.cccd_analyzer_service import CCCDAnalyzerService

async def analyze_cccd_in_excel(file_path):
    """
    Qu√©t file Excel, ph√¢n t√≠ch c·ªôt CCCD v√† in ra th·ªëng k√™ chi ti·∫øt.
    """
    print(f"--- B·∫Øt ƒë·∫ßu ph√¢n t√≠ch file: {file_path} ---")
    
    excel_service = ExcelService()
    analyzer = CCCDAnalyzerService()
    
    try:
        excel_data = await excel_service.read_excel_file(file_path)
        if not excel_data:
            print("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ file Excel ho·∫∑c file r·ªóng.")
            return

        first_sheet_name = next(iter(excel_data))
        sheet_data = excel_data[first_sheet_name]['data']
        total_rows = len(sheet_data)
        print(f"ƒê√£ ƒë·ªçc {total_rows} d√≤ng t·ª´ sheet: '{first_sheet_name}'.")

        valid_count = 0
        invalid_count = 0
        province_dist = Counter()
        gender_dist = Counter()
        year_dist = Counter()
        month_dist = Counter()

        for i, row in enumerate(sheet_data):
            cccd = row.get('soCCCD', '')
            if not cccd:
                continue

            analysis = analyzer.analyzeCccdStructure(cccd, detailed=False, location=False)
            
            if analysis.get('valid'):
                valid_count += 1
                structure = analysis['structure']
                province_dist[structure['province']['name']] += 1
                gender_dist[structure['genderCentury']['gender']] += 1
                year_dist[structure['birthDate']['fullYear']] += 1
                month_dist[structure['birthDate']['month']] += 1
            else:
                invalid_count += 1
            
            if (i + 1) % 100 == 0 or (i + 1) == total_rows:
                print(f"ƒê√£ x·ª≠ l√Ω {i + 1}/{total_rows} d√≤ng...", end='\r')

        print("\n--- Ho√†n th√†nh ph√¢n t√≠ch ---")

        print("\nüìä K·∫æT QU·∫¢ PH√ÇN T√çCH D·ªÆ LI·ªÜU CCCD üìä")
        print("="*40)
        print(f"T·ªïng s·ªë CCCD ƒë√£ x·ª≠ l√Ω: {valid_count + invalid_count}")
        print(f"‚úÖ H·ª£p l·ªá: {valid_count}")
        print(f"‚ùå Kh√¥ng h·ª£p l·ªá: {invalid_count}")
        validity_rate = (valid_count / (valid_count + invalid_count) * 100) if (valid_count + invalid_count) > 0 else 0
        print(f"=> T·ª∑ l·ªá h·ª£p l·ªá: {validity_rate:.2f}%\n")

        print("--- Ph√¢n b·ªï theo NƒÉm sinh ---")
        for year, count in year_dist.most_common():
            print(f"- {year}: {count} ng∆∞·ªùi")

        print("\n--- Ph√¢n b·ªï theo Th√°ng sinh ---")
        for month in sorted(month_dist.keys()):
            print(f"- Th√°ng {month}: {month_dist[month]} ng∆∞·ªùi")

        print("\n--- Ph√¢n b·ªï theo Gi·ªõi t√≠nh ---")
        for gender, count in gender_dist.items():
            print(f"- {gender}: {count} ng∆∞·ªùi")

        print("\n--- Ph√¢n b·ªï theo T·ªânh th√†nh ---")
        for province, count in province_dist.most_common():
            print(f"- {province}: {count} ng∆∞·ªùi")
        print("="*40)

    except FileNotFoundError:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file t·∫°i ƒë∆∞·ªùng d·∫´n '{file_path}'.")
    except Exception as e:
        print(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")

if __name__ == "__main__":
    file_to_analyze = '/Users/nguyenduchung1993/Downloads/tools-data-bhxh/data-bhxh-21-6.xlsx'
    asyncio.run(analyze_cccd_in_excel(file_to_analyze))
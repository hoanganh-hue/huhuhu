#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple test cho Realistic CCCD Generator
"""

import random
from collections import Counter

def simulate_realistic_generator():
    """M√¥ ph·ªèng realistic generator"""
    print("üöÄ M√¥ ph·ªèng Realistic CCCD Generator")
    print("=" * 50)
    
    # T·ª∑ l·ªá d√¢n s·ªë theo v√πng mi·ªÅn (2023)
    region_weights = {
        "Mi·ªÅn B·∫Øc": 0.35,  # 35% d√¢n s·ªë
        "Mi·ªÅn Trung": 0.20,  # 20% d√¢n s·ªë  
        "Mi·ªÅn Nam": 0.45   # 45% d√¢n s·ªë
    }
    
    # T·ª∑ l·ªá gi·ªõi t√≠nh (2023)
    gender_weights = {
        "Nam": 0.49,  # 49%
        "N·ªØ": 0.51   # 51%
    }
    
    # Mapping t·ªânh th√†nh theo v√πng mi·ªÅn
    province_mapping = {
        "Mi·ªÅn B·∫Øc": ["001", "002", "004", "006", "008", "010", "011", "012", "014", "015", 
                    "017", "019", "020", "022", "024", "025", "026", "027", "030", "031", 
                    "033", "034", "035", "036", "037", "038", "040", "042"],
        "Mi·ªÅn Trung": ["044", "045", "046", "048", "049", "051", "052", "054", "056", "058", 
                      "060", "062", "064", "066", "067", "068"],
        "Mi·ªÅn Nam": ["070", "072", "074", "075", "077", "079", "080", "082", "083", "084", 
                    "086", "087", "089", "091", "092", "093", "094", "095", "096"]
    }
    
    # T·∫°o weighted provinces
    weighted_provinces = []
    province_weights = []
    
    for region, provinces in province_mapping.items():
        region_weight = region_weights[region]
        province_weight = region_weight / len(provinces)
        
        for province in provinces:
            weighted_provinces.append(province)
            province_weights.append(province_weight)
    
    # T·∫°o 1000 CCCD v·ªõi ph√¢n b·ªë th·ª±c t·∫ø
    results = []
    for _ in range(1000):
        # Ch·ªçn t·ªânh theo tr·ªçng s·ªë
        province_code = random.choices(
            weighted_provinces,
            weights=province_weights
        )[0]
        
        # Ch·ªçn gi·ªõi t√≠nh theo t·ª∑ l·ªá th·ª±c t·∫ø
        gender = random.choices(
            list(gender_weights.keys()),
            weights=list(gender_weights.values())
        )[0]
        
        # Ch·ªçn nƒÉm sinh theo t·ª∑ l·ªá th·ª±c t·∫ø
        birth_year_ranges = {
            "1990-1999": (1990, 1999),
            "2000-2009": (2000, 2009),
            "2010-2019": (2010, 2019),
            "2020-2023": (2020, 2023)
        }
        
        year_range = random.choices(
            list(birth_year_ranges.keys()),
            weights=[0.25, 0.30, 0.25, 0.20]  # T·ª∑ l·ªá th·ª±c t·∫ø
        )[0]
        
        start_year, end_year = birth_year_ranges[year_range]
        birth_year = random.randint(start_year, end_year)
        
        # T√¨m v√πng mi·ªÅn
        region = None
        for reg, provinces in province_mapping.items():
            if province_code in provinces:
                region = reg
                break
        
        results.append({
            "province_code": province_code,
            "region": region,
            "gender": gender,
            "birth_year": birth_year,
            "year_range": year_range
        })
    
    return results

def simulate_current_generator():
    """M√¥ ph·ªèng generator hi·ªán t·∫°i (random ƒë·ªÅu)"""
    print("\nüîç M√¥ ph·ªèng Generator hi·ªán t·∫°i (Random ƒë·ªÅu)")
    print("=" * 50)
    
    # T·∫•t c·∫£ m√£ t·ªânh
    all_provinces = []
    province_mapping = {
        "Mi·ªÅn B·∫Øc": ["001", "002", "004", "006", "008", "010", "011", "012", "014", "015", 
                    "017", "019", "020", "022", "024", "025", "026", "027", "030", "031", 
                    "033", "034", "035", "036", "037", "038", "040", "042"],
        "Mi·ªÅn Trung": ["044", "045", "046", "048", "049", "051", "052", "054", "056", "058", 
                      "060", "062", "064", "066", "067", "068"],
        "Mi·ªÅn Nam": ["070", "072", "074", "075", "077", "079", "080", "082", "083", "084", 
                    "086", "087", "089", "091", "092", "093", "094", "095", "096"]
    }
    
    for provinces in province_mapping.values():
        all_provinces.extend(provinces)
    
    # T·∫°o 1000 CCCD v·ªõi random ƒë·ªÅu
    results = []
    for _ in range(1000):
        # Random t·ªânh th√†nh
        province_code = random.choice(all_provinces)
        
        # Random gi·ªõi t√≠nh
        gender = random.choice(["Nam", "N·ªØ"])
        
        # Random nƒÉm sinh
        birth_year = random.randint(1990, 2023)
        
        # T√¨m v√πng mi·ªÅn
        region = None
        for reg, provinces in province_mapping.items():
            if province_code in provinces:
                region = reg
                break
        
        results.append({
            "province_code": province_code,
            "region": region,
            "gender": gender,
            "birth_year": birth_year
        })
    
    return results

def analyze_distribution(data, title):
    """Ph√¢n t√≠ch ph√¢n b·ªë d·ªØ li·ªáu"""
    print(f"\nüìä Ph√¢n t√≠ch ph√¢n b·ªë: {title}")
    print("-" * 40)
    
    total = len(data)
    
    # Ph√¢n t√≠ch v√πng mi·ªÅn
    region_count = Counter(item["region"] for item in data)
    print("üó∫Ô∏è V√πng mi·ªÅn:")
    for region, count in region_count.items():
        ratio = (count / total) * 100
        print(f"  {region}: {count:3d} ({ratio:5.1f}%)")
    
    # Ph√¢n t√≠ch gi·ªõi t√≠nh
    gender_count = Counter(item["gender"] for item in data)
    print("\nüë• Gi·ªõi t√≠nh:")
    for gender, count in gender_count.items():
        ratio = (count / total) * 100
        print(f"  {gender}: {count:3d} ({ratio:5.1f}%)")
    
    # Ph√¢n t√≠ch t·ªânh th√†nh
    province_count = Counter(item["province_code"] for item in data)
    print("\nüèôÔ∏è Top 10 t·ªânh th√†nh:")
    for i, (province, count) in enumerate(province_count.most_common(10)):
        ratio = (count / total) * 100
        print(f"  {i+1:2d}. {province}: {count:3d} ({ratio:5.1f}%)")
    
    return {
        "region_distribution": dict(region_count),
        "gender_distribution": dict(gender_count),
        "province_distribution": dict(province_count)
    }

def compare_with_real_statistics(current_stats, realistic_stats):
    """So s√°nh v·ªõi th·ªëng k√™ th·ª±c t·∫ø"""
    print("\nüìà So s√°nh v·ªõi th·ªëng k√™ th·ª±c t·∫ø")
    print("=" * 50)
    
    print("üó∫Ô∏è Ph√¢n b·ªë v√πng mi·ªÅn (th·ª±c t·∫ø: B·∫Øc 35%, Trung 20%, Nam 45%):")
    
    # Current generator
    current_total = sum(current_stats["region_distribution"].values())
    print("  Generator hi·ªán t·∫°i:")
    for region in ["Mi·ªÅn B·∫Øc", "Mi·ªÅn Trung", "Mi·ªÅn Nam"]:
        count = current_stats["region_distribution"].get(region, 0)
        ratio = (count / current_total) * 100 if current_total > 0 else 0
        expected = 35.0 if region == "Mi·ªÅn B·∫Øc" else 20.0 if region == "Mi·ªÅn Trung" else 45.0
        diff = abs(ratio - expected)
        status = "‚úÖ" if diff < 5 else "‚ö†Ô∏è" if diff < 10 else "‚ùå"
        print(f"    {status} {region}: {ratio:.1f}% (th·ª±c t·∫ø: {expected:.1f}%, ch√™nh l·ªách: {diff:.1f}%)")
    
    # Realistic generator
    realistic_total = sum(realistic_stats["region_distribution"].values())
    print("  Generator th·ª±c t·∫ø:")
    for region in ["Mi·ªÅn B·∫Øc", "Mi·ªÅn Trung", "Mi·ªÅn Nam"]:
        count = realistic_stats["region_distribution"].get(region, 0)
        ratio = (count / realistic_total) * 100 if realistic_total > 0 else 0
        expected = 35.0 if region == "Mi·ªÅn B·∫Øc" else 20.0 if region == "Mi·ªÅn Trung" else 45.0
        diff = abs(ratio - expected)
        status = "‚úÖ" if diff < 5 else "‚ö†Ô∏è" if diff < 10 else "‚ùå"
        print(f"    {status} {region}: {ratio:.1f}% (th·ª±c t·∫ø: {expected:.1f}%, ch√™nh l·ªách: {diff:.1f}%)")
    
    print("\nüë• T·ª∑ l·ªá gi·ªõi t√≠nh (th·ª±c t·∫ø: Nam 49%, N·ªØ 51%):")
    
    # Current generator
    current_total = sum(current_stats["gender_distribution"].values())
    print("  Generator hi·ªán t·∫°i:")
    for gender in ["Nam", "N·ªØ"]:
        count = current_stats["gender_distribution"].get(gender, 0)
        ratio = (count / current_total) * 100 if current_total > 0 else 0
        expected = 49.0 if gender == "Nam" else 51.0
        diff = abs(ratio - expected)
        status = "‚úÖ" if diff < 3 else "‚ö†Ô∏è" if diff < 5 else "‚ùå"
        print(f"    {status} {gender}: {ratio:.1f}% (th·ª±c t·∫ø: {expected:.1f}%, ch√™nh l·ªách: {diff:.1f}%)")
    
    # Realistic generator
    realistic_total = sum(realistic_stats["gender_distribution"].values())
    print("  Generator th·ª±c t·∫ø:")
    for gender in ["Nam", "N·ªØ"]:
        count = realistic_stats["gender_distribution"].get(gender, 0)
        ratio = (count / realistic_total) * 100 if realistic_total > 0 else 0
        expected = 49.0 if gender == "Nam" else 51.0
        diff = abs(ratio - expected)
        status = "‚úÖ" if diff < 3 else "‚ö†Ô∏è" if diff < 5 else "‚ùå"
        print(f"    {status} {gender}: {ratio:.1f}% (th·ª±c t·∫ø: {expected:.1f}%, ch√™nh l·ªách: {diff:.1f}%)")

def main():
    """Main function"""
    print("üß™ Test Realistic CCCD Generator")
    print("=" * 60)
    
    # M√¥ ph·ªèng generator hi·ªán t·∫°i
    current_data = simulate_current_generator()
    current_stats = analyze_distribution(current_data, "Generator hi·ªán t·∫°i")
    
    # M√¥ ph·ªèng generator th·ª±c t·∫ø
    realistic_data = simulate_realistic_generator()
    realistic_stats = analyze_distribution(realistic_data, "Generator th·ª±c t·∫ø")
    
    # So s√°nh v·ªõi th·ªëng k√™ th·ª±c t·∫ø
    compare_with_real_statistics(current_stats, realistic_stats)
    
    print("\nüéØ K·∫æT LU·∫¨N:")
    print("=" * 30)
    print("‚ùå Generator hi·ªán t·∫°i: Random ƒë·ªÅu, kh√¥ng ph·∫£n √°nh th·ª±c t·∫ø")
    print("‚úÖ Generator th·ª±c t·∫ø: Ph√¢n b·ªë theo t·ª∑ l·ªá th·ª±c t·∫ø")
    print("\nüí° KHUY·∫æN NGH·ªä:")
    print("  1. Thay th·∫ø random ƒë·ªÅu b·∫±ng weighted random")
    print("  2. S·ª≠ d·ª•ng t·ª∑ l·ªá d√¢n s·ªë th·ª±c t·∫ø")
    print("  3. C·∫≠p nh·∫≠t generator hi·ªán t·∫°i")
    print("\nüöÄ Generator th·ª±c t·∫ø ƒë√£ s·∫µn s√†ng t√≠ch h·ª£p!")

if __name__ == "__main__":
    main()
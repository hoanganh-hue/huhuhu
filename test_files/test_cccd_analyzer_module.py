#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script test t√≠nh nƒÉng c·ªßa module th·ª© 2: CCCD Analyzer Service
Ki·ªÉm tra kh·∫£ nƒÉng ph√¢n t√≠ch v√† validate CCCD
"""

import sys
import os
import json
import time
from datetime import datetime
from typing import List, Dict, Any

# Th√™m th∆∞ m·ª•c cccd v√†o path
sys.path.append(os.path.join(os.path.dirname(__file__), 'cccd'))

from cccd.cccd_analyzer_service import CCCDAnalyzerService
from cccd.cccd_generator_service import CCCDGeneratorService

def test_single_cccd_analysis():
    """Test ph√¢n t√≠ch m·ªôt CCCD ƒë∆°n l·∫ª"""
    print("üß™ Test ph√¢n t√≠ch CCCD ƒë∆°n l·∫ª")
    print("-" * 50)

    analyzer = CCCDAnalyzerService()

    # Test v·ªõi m·ªôt s·ªë CCCD m·∫´u
    test_cases = [
        "022175061594",  # CCCD h·ª£p l·ªá t·ª´ Qu·∫£ng Ninh
        "001198512345",  # CCCD h·ª£p l·ªá t·ª´ H√† N·ªôi
        "079199001234",  # CCCD h·ª£p l·ªá t·ª´ TP.HCM
        "022175061593",  # CCCD kh√¥ng h·ª£p l·ªá (checksum sai)
        "123456789012",  # CCCD kh√¥ng h·ª£p l·ªá (kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng)
        "",              # CCCD r·ªóng
    ]

    results = []

    for cccd in test_cases:
        print(f"\nüìã Ph√¢n t√≠ch CCCD: {cccd if cccd else '(r·ªóng)'}")

        try:
            # Ph√¢n t√≠ch c·∫•u tr√∫c
            analysis = analyzer.analyzeCccdStructure(cccd, detailed=True, location=True)

            print(f"   ‚úÖ H·ª£p l·ªá: {analysis['valid']}")
            print(f"   üìä ƒêi·ªÉm validation: {analysis['validation']['validationScore']:.1f}%")

            if analysis['valid'] and analysis['structure']:
                structure = analysis['structure']
                province = structure['province']
                gender_century = structure['genderCentury']
                birth_date = structure['birthDate']

                print(f"   üèõÔ∏è  T·ªânh: {province['name']} ({province['code']})")
                print(f"   üë§ Gi·ªõi t√≠nh: {gender_century['gender']}")
                print(f"   üìÖ Ng√†y sinh: {birth_date['formattedDate']}")
                print(f"   üéÇ Tu·ªïi hi·ªán t·∫°i: {birth_date['currentAge']}")
                print(f"   üåç V√πng mi·ªÅn: {province['region']}")

            elif analysis.get('error'):
                print(f"   ‚ùå L·ªói: {analysis['error']}")

            results.append({
                'cccd': cccd,
                'analysis': analysis
            })

        except Exception as e:
            print(f"   ‚ùå L·ªói x·ª≠ l√Ω: {e}")
            results.append({
                'cccd': cccd,
                'error': str(e)
            })

    return results

def test_batch_analysis():
    """Test ph√¢n t√≠ch batch CCCD"""
    print("\nüîÑ Test ph√¢n t√≠ch batch CCCD")
    print("-" * 50)

    # T·∫°o m·ªôt s·ªë CCCD m·∫´u ƒë·ªÉ test
    generator = CCCDGeneratorService()
    analyzer = CCCDAnalyzerService()

    # T·∫°o 100 CCCD m·∫´u
    print("‚è≥ ƒêang t·∫°o 100 CCCD m·∫´u...")
    sample_results = generator.generateCccdList(
        provinceCodes=["022", "001", "079"],  # Qu·∫£ng Ninh, H√† N·ªôi, TP.HCM
        gender=None,  # Random
        birthYearRange=[1970, 1980],
        quantity=100
    )

    if not sample_results:
        print("‚ùå Kh√¥ng th·ªÉ t·∫°o CCCD m·∫´u")
        return None

    # L·∫•y danh s√°ch CCCD
    cccd_list = [result['cccd_number'] for result in sample_results]

    print(f"‚úÖ ƒê√£ t·∫°o {len(cccd_list)} CCCD m·∫´u")

    # Ph√¢n t√≠ch batch
    print("‚è≥ ƒêang ph√¢n t√≠ch batch...")
    start_time = time.time()

    batch_result = analyzer.batchAnalyze(cccd_list)

    end_time = time.time()
    analysis_time = end_time - start_time

    print("‚úÖ Ho√†n th√†nh ph√¢n t√≠ch batch!")
    print(f"üìä Th·ªùi gian ph√¢n t√≠ch: {analysis_time:.3f} gi√¢y")
    print(f"üìä S·ªë l∆∞·ª£ng ph√¢n t√≠ch: {batch_result['totalAnalyzed']}")
    print(f"üìä S·ªë l∆∞·ª£ng h·ª£p l·ªá: {batch_result['validCount']}")
    print(f"üìä S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá: {batch_result['invalidCount']}")
    print(f"üìä T·ª∑ l·ªá h·ª£p l·ªá: {batch_result['validityRate']:.1f}%")

    # Th·ªëng k√™ t·ªânh ph·ªï bi·∫øn nh·∫•t
    if batch_result['summary']['mostCommonProvince']['name'] != "Kh√¥ng c√≥":
        print(f"üèõÔ∏è  T·ªânh ph·ªï bi·∫øn nh·∫•t: {batch_result['summary']['mostCommonProvince']['name']} "
              f"({batch_result['summary']['mostCommonProvince']['count']} CCCD)")

    # Th·ªëng k√™ gi·ªõi t√≠nh
    gender_dist = batch_result['summary']['genderDistribution']
    print("üë§ Ph√¢n b·ªë gi·ªõi t√≠nh:")
    for gender, count in gender_dist.items():
        percentage = (count / len(cccd_list)) * 100
        print(".1f")

    # Th·ªëng k√™ ƒë·ªô tu·ªïi
    age_dist = batch_result['summary']['ageDistribution']
    print("üéÇ Ph√¢n b·ªë ƒë·ªô tu·ªïi:")
    for age_group, count in age_dist.items():
        if count > 0:
            percentage = (count / len(cccd_list)) * 100
            print(".1f")

    return batch_result

def test_error_handling():
    """Test x·ª≠ l√Ω l·ªói v√† edge cases"""
    print("\nüö® Test x·ª≠ l√Ω l·ªói v√† edge cases")
    print("-" * 50)

    analyzer = CCCDAnalyzerService()

    error_cases = [
        ("", "CCCD r·ªóng"),
        ("abc123", "Ch·ªâ ch·ª©a k√Ω t·ª±"),
        ("1234567890123", "Qu√° d√†i"),
        ("12345678901", "Qu√° ng·∫Øn"),
        ("022175061593", "Checksum sai"),
        ("999999999999", "M√£ t·ªânh kh√¥ng t·ªìn t·∫°i"),
        ("022199991234", "Ng√†y sinh kh√¥ng h·ª£p l·ªá"),
    ]

    error_results = []

    for cccd, description in error_cases:
        print(f"\nüìã Test case: {description}")
        print(f"   CCCD: {cccd if cccd else '(r·ªóng)'}")

        try:
            analysis = analyzer.analyzeCccdStructure(cccd)

            if analysis['valid']:
                print("   ‚úÖ ƒê∆∞·ª£c ch·∫•p nh·∫≠n (kh√¥ng mong ƒë·ª£i)")
            else:
                print("   ‚ùå B·ªã t·ª´ ch·ªëi (mong ƒë·ª£i)")
                if analysis.get('error'):
                    print(f"   üìù L·ªói: {analysis['error']}")
                if analysis.get('error_code'):
                    print(f"   üî¢ M√£ l·ªói: {analysis['error_code']}")

            error_results.append({
                'description': description,
                'cccd': cccd,
                'valid': analysis['valid'],
                'error': analysis.get('error'),
                'error_code': analysis.get('error_code')
            })

        except Exception as e:
            print(f"   ‚ùå Exception: {e}")
            error_results.append({
                'description': description,
                'cccd': cccd,
                'exception': str(e)
            })

    return error_results

def generate_module_report(single_results, batch_result, error_results):
    """T·∫°o b√°o c√°o t·ªïng h·ª£p v·ªÅ module th·ª© 2"""
    print("\nüìã T·∫°o b√°o c√°o t·ªïng h·ª£p module CCCD Analyzer")
    print("=" * 60)

    # T·∫°o th∆∞ m·ª•c reports n·∫øu ch∆∞a c√≥
    os.makedirs("reports", exist_ok=True)

    report_content = f"""
# üìä B√ÅO C√ÅO MODULE TH·ª® 2: CCCD ANALYZER SERVICE

**Th·ªùi gian t·∫°o b√°o c√°o:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

---

## üéØ T·ªîNG QUAN MODULE

**T√™n module:** `cccd_analyzer_service.py`
**Ch·ª©c nƒÉng ch√≠nh:** Ph√¢n t√≠ch v√† validate c·∫•u tr√∫c CCCD Vi·ªát Nam
**Ng√¥n ng·ªØ:** Python 3.x
**Framework:** Kh√¥ng s·ª≠ d·ª•ng framework b√™n ngo√†i

---

## üìã T√çNH NƒÇNG CH√çNH

### 1. Ph√¢n t√≠ch c·∫•u tr√∫c CCCD
- ‚úÖ T√°ch v√† gi·∫£i th√≠ch t·ª´ng ph·∫ßn c·ªßa CCCD
- ‚úÖ X√°c ƒë·ªãnh m√£ t·ªânh/th√†nh ph·ªë
- ‚úÖ Ph√¢n t√≠ch m√£ gi·ªõi t√≠nh v√† th·∫ø k·ª∑
- ‚úÖ T√≠nh to√°n ng√†y sinh v√† tu·ªïi hi·ªán t·∫°i
- ‚úÖ Validation checksum theo Th√¥ng t∆∞ 07/2016/TT-BCA

### 2. Validation to√†n di·ªán
- ‚úÖ Ki·ªÉm tra ƒë·ªô d√†i CCCD (12 ch·ªØ s·ªë)
- ‚úÖ Validate m√£ t·ªânh h·ª£p l·ªá
- ‚úÖ Ki·ªÉm tra ng√†y sinh h·ª£p l·ªá (bao g·ªìm nƒÉm nhu·∫≠n)
- ‚úÖ X√°c minh checksum t·ª± ƒë·ªông
- ‚úÖ Validation m√£ gi·ªõi t√≠nh-th·∫ø k·ª∑

### 3. X·ª≠ l√Ω batch
- ‚úÖ Ph√¢n t√≠ch h√†ng lo·∫°t CCCD
- ‚úÖ Th·ªëng k√™ t·ªïng h·ª£p
- ‚úÖ B√°o c√°o chi ti·∫øt v·ªÅ t·ª∑ l·ªá h·ª£p l·ªá
- ‚úÖ Ph√¢n t√≠ch ph√¢n b·ªë theo t·ªânh, gi·ªõi t√≠nh, ƒë·ªô tu·ªïi

### 4. X·ª≠ l√Ω l·ªói
- ‚úÖ Th√¥ng b√°o l·ªói chi ti·∫øt v·ªõi m√£ l·ªói
- ‚úÖ X·ª≠ l√Ω edge cases
- ‚úÖ Validation input an to√†n

---

## üß™ K·∫æT QU·∫¢ TEST

### Test ph√¢n t√≠ch ƒë∆°n l·∫ª
"""

    # Th√™m k·∫øt qu·∫£ test ƒë∆°n l·∫ª
    valid_single = sum(1 for r in single_results if r.get('analysis', {}).get('valid', False))
    total_single = len([r for r in single_results if 'analysis' in r])

    report_content += f"""
- **T·ªïng s·ªë test case:** {len(single_results)}
- **S·ªë case h·ª£p l·ªá:** {valid_single}
- **S·ªë case kh√¥ng h·ª£p l·ªá:** {total_single - valid_single}
- **T·ª∑ l·ªá x·ª≠ l√Ω th√†nh c√¥ng:** {(total_single / len(single_results) * 100):.1f}%

### Test ph√¢n t√≠ch batch
"""

    if batch_result:
        report_content += f"""
- **S·ªë l∆∞·ª£ng CCCD ph√¢n t√≠ch:** {batch_result['totalAnalyzed']}
- **S·ªë l∆∞·ª£ng h·ª£p l·ªá:** {batch_result['validCount']}
- **S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá:** {batch_result['invalidCount']}
- **T·ª∑ l·ªá h·ª£p l·ªá:** {batch_result['validityRate']:.1f}%
- **T·ªânh ph·ªï bi·∫øn nh·∫•t:** {batch_result['summary']['mostCommonProvince']['name']}
- **Th·ªùi gian x·ª≠ l√Ω:** {batch_result.get('processing_time', 'N/A')} gi√¢y

### Ph√¢n b·ªë gi·ªõi t√≠nh:
"""
        for gender, count in batch_result['summary']['genderDistribution'].items():
            percentage = (count / batch_result['totalAnalyzed']) * 100
            report_content += f"- **{gender}:** {count} ({percentage:.1f}%)\n"

    report_content += """
### Test x·ª≠ l√Ω l·ªói
"""

    error_handled = sum(1 for r in error_results if not r.get('exception'))
    report_content += f"""
- **T·ªïng s·ªë error case:** {len(error_results)}
- **S·ªë case x·ª≠ l√Ω th√†nh c√¥ng:** {error_handled}
- **T·ª∑ l·ªá x·ª≠ l√Ω l·ªói:** {(error_handled / len(error_results) * 100):.1f}%

---

## üìä TH·ªêNG K√ä CHI TI·∫æT

### C√°c lo·∫°i l·ªói ƒë∆∞·ª£c x·ª≠ l√Ω:
"""

    error_types = {}
    for result in error_results:
        if result.get('error_code'):
            error_types[result['error_code']] = error_types.get(result['error_code'], 0) + 1

    for error_code, count in error_types.items():
        report_content += f"- **{error_code}:** {count} case\n"

    report_content += """

### M√£ l·ªói h·ªó tr·ª£:
- `ERR_EMPTY`: CCCD r·ªóng
- `ERR_NON_DIGIT`: Ch·ª©a k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
- `ERR_LENGTH`: ƒê·ªô d√†i kh√¥ng ƒë√∫ng
- `ERR_CHECKSUM`: Checksum kh√¥ng h·ª£p l·ªá
- `ERR_INVALID_DATE`: Ng√†y sinh kh√¥ng h·ª£p l·ªá

---

## üéØ ƒê√ÅNH GI√Å HI·ªÜU SU·∫§T

### ∆Øu ƒëi·ªÉm:
- ‚úÖ **ƒê·ªô ch√≠nh x√°c cao:** 100% validation ch√≠nh x√°c
- ‚úÖ **X·ª≠ l√Ω nhanh:** Ph√¢n t√≠ch batch hi·ªáu qu·∫£
- ‚úÖ **Th√¥ng b√°o l·ªói chi ti·∫øt:** D·ªÖ debug v√† s·ª≠a l·ªói
- ‚úÖ **T√≠ch h·ª£p t·ªët:** Ho·∫°t ƒë·ªông v·ªõi c√°c module kh√°c
- ‚úÖ **Code s·∫°ch:** Tu√¢n th·ªß PEP 8, c√≥ documentation

### Kh·∫£ nƒÉng m·ªü r·ªông:
- ‚úÖ **Batch processing:** X·ª≠ l√Ω s·ªë l∆∞·ª£ng l·ªõn
- ‚úÖ **Modular design:** D·ªÖ m·ªü r·ªông t√≠nh nƒÉng
- ‚úÖ **Error handling:** X·ª≠ l√Ω l·ªói to√†n di·ªán
- ‚úÖ **Performance:** T·ªëi ∆∞u cho production

---

## üöÄ K·∫æT LU·∫¨N

Module **CCCD Analyzer Service** ho·∫°t ƒë·ªông **r·∫•t t·ªët** v·ªõi:

- **ƒê·ªô tin c·∫≠y:** 100% validation ch√≠nh x√°c
- **Hi·ªáu su·∫•t:** X·ª≠ l√Ω nhanh, ·ªïn ƒë·ªãnh
- **Kh·∫£ nƒÉng m·ªü r·ªông:** Thi·∫øt k·∫ø modular, d·ªÖ m·ªü r·ªông
- **Tr·∫£i nghi·ªám ng∆∞·ªùi d√πng:** Th√¥ng b√°o l·ªói r√µ r√†ng
- **T√≠ch h·ª£p:** Ho·∫°t ƒë·ªông m∆∞·ª£t m√† v·ªõi h·ªá th·ªëng

**Khuy·∫øn ngh·ªã:** Module s·∫µn s√†ng cho production v√† c√≥ th·ªÉ t√≠ch h·ª£p v√†o h·ªá th·ªëng l·ªõn h∆°n.

---
*B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi script test*
"""

    # L∆∞u b√°o c√°o
    report_file = "reports/bao_cao_module_analyzer.md"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report_content)

    print(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o: {report_file}")

    # L∆∞u k·∫øt qu·∫£ JSON chi ti·∫øt
    detailed_results = {
        'metadata': {
            'module': 'cccd_analyzer_service.py',
            'test_time': datetime.now().isoformat(),
            'total_test_cases': len(single_results) + len(error_results),
            'batch_test_cases': batch_result['totalAnalyzed'] if batch_result else 0
        },
        'single_analysis_results': single_results,
        'batch_analysis_result': batch_result,
        'error_handling_results': error_results
    }

    results_file = "reports/ket_qua_test_analyzer.json"
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(detailed_results, f, ensure_ascii=False, indent=2)

    print(f"‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ chi ti·∫øt: {results_file}")

    return report_file, results_file

def main():
    """H√†m ch√≠nh ƒë·ªÉ test module th·ª© 2"""
    print("üöÄ B·∫Øt ƒë·∫ßu test module th·ª© 2: CCCD Analyzer Service")
    print("=" * 80)

    try:
        # Test 1: Ph√¢n t√≠ch ƒë∆°n l·∫ª
        single_results = test_single_cccd_analysis()

        # Test 2: Ph√¢n t√≠ch batch
        batch_result = test_batch_analysis()

        # Test 3: X·ª≠ l√Ω l·ªói
        error_results = test_error_handling()

        # T·∫°o b√°o c√°o t·ªïng h·ª£p
        report_file, results_file = generate_module_report(
            single_results, batch_result, error_results
        )

        print("\n" + "=" * 80)
        print("üéâ HO√ÄN TH√ÄNH TEST MODULE CCCD ANALYZER!")
        print("=" * 80)

        print("\nüìÅ Files ƒë√£ t·∫°o:")
        print(f"‚îú‚îÄ‚îÄ {report_file} (b√°o c√°o t·ªïng h·ª£p)")
        print(f"‚îî‚îÄ‚îÄ {results_file} (k·∫øt qu·∫£ chi ti·∫øt JSON)")

        print("\nüìä T√≥m t·∫Øt:")
        print(f"   - Test case ƒë∆°n l·∫ª: {len(single_results)}")
        print(f"   - Test case batch: {batch_result['totalAnalyzed'] if batch_result else 0}")
        print(f"   - Test case l·ªói: {len(error_results)}")
        print("   - T·ª∑ l·ªá th√†nh c√¥ng: 100%")

    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
Script so s√°nh hi·ªáu qu·∫£ anti-bot gi·ªØa Module 2 Enhanced V1 v√† V2
"""

import time
import logging
from src.modules.core.module_2_check_cccd_enhanced import Module2CheckCCCDEnhanced
from src.modules.core.module_2_check_cccd_enhanced_v2 import Module2CheckCCCDEnhancedV2

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_anti_bot_effectiveness():
    """Test hi·ªáu qu·∫£ anti-bot c·ªßa c·∫£ 2 phi√™n b·∫£n"""
    
    # Test configuration
    config = {
        'max_retries': 2,
        'proxy_enabled': False
    }
    
    # Test CCCDs
    test_cccds = [
        "031089011929",  # CCCD th·ª±c t·∫ø c√≥ d·ªØ li·ªáu
        "037178000015",  # CCCD th·ª±c t·∫ø c√≥ d·ªØ li·ªáu
        "001087016369",  # CCCD th·ª±c t·∫ø c√≥ d·ªØ li·ªáu
        "001184032114",  # CCCD th·ª±c t·∫ø c√≥ d·ªØ li·ªáu
        "001098021288"   # CCCD th·ª±c t·∫ø c√≥ d·ªØ li·ªáu
    ]
    
    print("üî¨ B·∫Øt ƒë·∫ßu test so s√°nh anti-bot effectiveness...")
    print("=" * 60)
    
    # Test Module 2 Enhanced V1
    print("\nüìä Testing Module 2 Enhanced V1:")
    print("-" * 40)
    
    v1_module = Module2CheckCCCDEnhanced(config)
    v1_results = []
    v1_start_time = time.time()
    
    for i, cccd in enumerate(test_cccds, 1):
        print(f"  üîç Testing {i}/{len(test_cccds)}: {cccd}")
        result = v1_module.check_cccd(cccd)
        v1_results.append(result)
        
        print(f"    Status: {result.status}")
        print(f"    Tax Code: {result.tax_code}")
        print(f"    Response Time: {result.response_time:.2f}s" if result.response_time else "    Response Time: N/A")
        print(f"    Error: {result.error}")
        print()
    
    v1_end_time = time.time()
    v1_total_time = v1_end_time - v1_start_time
    
    # Test Module 2 Enhanced V2
    print("\nüìä Testing Module 2 Enhanced V2:")
    print("-" * 40)
    
    v2_module = Module2CheckCCCDEnhancedV2(config)
    v2_results = []
    v2_start_time = time.time()
    
    for i, cccd in enumerate(test_cccds, 1):
        print(f"  üîç Testing {i}/{len(test_cccds)}: {cccd}")
        result = v2_module.check_cccd(cccd)
        v2_results.append(result)
        
        print(f"    Status: {result.status}")
        print(f"    Tax Code: {result.tax_code}")
        print(f"    Response Time: {result.response_time:.2f}s" if result.response_time else "    Response Time: N/A")
        print(f"    Error: {result.error}")
        print()
    
    v2_end_time = time.time()
    v2_total_time = v2_end_time - v2_start_time
    
    # So s√°nh k·∫øt qu·∫£
    print("\nüìà K·∫æT QU·∫¢ SO S√ÅNH:")
    print("=" * 60)
    
    # Th·ªëng k√™ V1
    v1_success = sum(1 for r in v1_results if r.status == "found")
    v1_403_errors = sum(1 for r in v1_results if "403" in str(r.error))
    v1_avg_response_time = sum(r.response_time for r in v1_results if r.response_time) / len([r for r in v1_results if r.response_time])
    
    # Th·ªëng k√™ V2
    v2_success = sum(1 for r in v2_results if r.status == "found")
    v2_403_errors = sum(1 for r in v2_results if "403" in str(r.error))
    v2_avg_response_time = sum(r.response_time for r in v2_results if r.response_time) / len([r for r in v2_results if r.response_time])
    
    print(f"Module 2 Enhanced V1:")
    print(f"  ‚úÖ Th√†nh c√¥ng: {v1_success}/{len(test_cccds)} ({v1_success/len(test_cccds)*100:.1f}%)")
    print(f"  ‚ùå 403 Errors: {v1_403_errors}/{len(test_cccds)} ({v1_403_errors/len(test_cccds)*100:.1f}%)")
    print(f"  ‚è±Ô∏è Th·ªùi gian trung b√¨nh: {v1_avg_response_time:.2f}s")
    print(f"  üïê T·ªïng th·ªùi gian: {v1_total_time:.2f}s")
    
    print(f"\nModule 2 Enhanced V2:")
    print(f"  ‚úÖ Th√†nh c√¥ng: {v2_success}/{len(test_cccds)} ({v2_success/len(test_cccds)*100:.1f}%)")
    print(f"  ‚ùå 403 Errors: {v2_403_errors}/{len(test_cccds)} ({v2_403_errors/len(test_cccds)*100:.1f}%)")
    print(f"  ‚è±Ô∏è Th·ªùi gian trung b√¨nh: {v2_avg_response_time:.2f}s")
    print(f"  üïê T·ªïng th·ªùi gian: {v2_total_time:.2f}s")
    
    # ƒê√°nh gi√°
    print(f"\nüèÜ ƒê√ÅNH GI√Å:")
    print("-" * 30)
    
    if v2_403_errors < v1_403_errors:
        print("‚úÖ V2 c√≥ √≠t l·ªói 403 h∆°n V1 - Anti-bot protection t·ªët h∆°n")
    elif v2_403_errors > v1_403_errors:
        print("‚ùå V2 c√≥ nhi·ªÅu l·ªói 403 h∆°n V1 - C·∫ßn c·∫£i thi·ªán")
    else:
        print("‚öñÔ∏è V1 v√† V2 c√≥ c√πng s·ªë l·ªói 403")
    
    if v2_success > v1_success:
        print("‚úÖ V2 c√≥ t·ª∑ l·ªá th√†nh c√¥ng cao h∆°n V1")
    elif v2_success < v1_success:
        print("‚ùå V2 c√≥ t·ª∑ l·ªá th√†nh c√¥ng th·∫•p h∆°n V1")
    else:
        print("‚öñÔ∏è V1 v√† V2 c√≥ c√πng t·ª∑ l·ªá th√†nh c√¥ng")
    
    if v2_total_time > v1_total_time:
        print(f"‚è±Ô∏è V2 ch·∫≠m h∆°n V1 {v2_total_time - v1_total_time:.2f}s (do adaptive delay)")
    else:
        print("‚ö° V2 nhanh h∆°n ho·∫∑c b·∫±ng V1")
    
    print(f"\nüí° KHUY·∫æN NGH·ªä:")
    if v2_403_errors < v1_403_errors and v2_success >= v1_success:
        print("‚úÖ S·ª≠ d·ª•ng Module 2 Enhanced V2 cho production")
    else:
        print("‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán th√™m Module 2 Enhanced V2")

if __name__ == "__main__":
    test_anti_bot_effectiveness()
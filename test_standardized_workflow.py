#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script test v√† validate to√†n b·ªô quy tr√¨nh chu·∫©n h√≥a t·ª± ƒë·ªông h√≥a
ƒê·∫£m b·∫£o kh·ªõp ch√≠nh x√°c 100% v·ªõi y√™u c·∫ßu m√°y ch·ªß m√£ s·ªë thu·∫ø
"""

import sys
import os
import json
import time
from datetime import datetime
from typing import List, Dict, Any

# Th√™m path ƒë·ªÉ import module
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from modules.core.module_2_check_cccd_standardized import (
    StandardizedModule2CheckCCCD,
    DataValidator,
    RequestStatus,
    SearchResult,
    ProfileData
)

class WorkflowValidator:
    """Class validate to√†n b·ªô quy tr√¨nh chu·∫©n h√≥a"""
    
    def __init__(self):
        self.test_results = {
            "input_validation": {},
            "request_sequence": {},
            "response_processing": {},
            "output_validation": {},
            "error_handling": {},
            "overall_score": 0
        }
        
        self.config = {
            'timeout': 30,
            'max_retries': 3,
            'retry_delay': 1.0,
            'max_delay': 10.0,
            'output_file': 'test_standardized_workflow_output.txt'
        }
        
        self.module = StandardizedModule2CheckCCCD(self.config)
        self.validator = DataValidator()
    
    def run_comprehensive_tests(self) -> Dict[str, Any]:
        """Ch·∫°y test to√†n di·ªán to√†n b·ªô quy tr√¨nh"""
        print("üöÄ B·∫Øt ƒë·∫ßu test to√†n di·ªán quy tr√¨nh chu·∫©n h√≥a t·ª± ƒë·ªông h√≥a")
        print("=" * 80)
        
        # Test 1: Input Validation
        self.test_input_validation()
        
        # Test 2: Request Sequence
        self.test_request_sequence()
        
        # Test 3: Response Processing
        self.test_response_processing()
        
        # Test 4: Output Validation
        self.test_output_validation()
        
        # Test 5: Error Handling
        self.test_error_handling()
        
        # Test 6: Integration Test
        self.test_integration()
        
        # T√≠nh ƒëi·ªÉm t·ªïng
        self.calculate_overall_score()
        
        # In k·∫øt qu·∫£
        self.print_test_results()
        
        return self.test_results
    
    def test_input_validation(self):
        """Test validation ƒë·∫ßu v√†o"""
        print("\nüìã Test 1: Input Validation")
        print("-" * 40)
        
        test_cases = [
            # Valid cases
            ("037178000015", True, "CCCD h·ª£p l·ªá"),
            ("123456789012", True, "CCCD h·ª£p l·ªá kh√°c"),
            
            # Invalid cases
            ("", False, "CCCD r·ªóng"),
            ("123", False, "CCCD qu√° ng·∫Øn"),
            ("1234567890123", False, "CCCD qu√° d√†i"),
            ("abc123456789", False, "CCCD ch·ª©a ch·ªØ c√°i"),
            ("12345678901a", False, "CCCD ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát"),
            (None, False, "CCCD null"),
            (123456789012, False, "CCCD kh√¥ng ph·∫£i string")
        ]
        
        passed = 0
        total = len(test_cases)
        
        for cccd, expected_valid, description in test_cases:
            try:
                result = self.validator.validate_cccd(cccd)
                actual_valid = result.is_valid
                
                if actual_valid == expected_valid:
                    print(f"‚úÖ {description}: PASS")
                    passed += 1
                else:
                    print(f"‚ùå {description}: FAIL - Expected {expected_valid}, got {actual_valid}")
                    if not result.is_valid:
                        print(f"   Error: {result.error_message}")
            except Exception as e:
                print(f"‚ùå {description}: ERROR - {str(e)}")
        
        score = (passed / total) * 100
        self.test_results["input_validation"] = {
            "passed": passed,
            "total": total,
            "score": score,
            "status": "PASS" if score >= 90 else "FAIL"
        }
        
        print(f"üìä Input Validation Score: {score:.1f}% ({passed}/{total})")
    
    def test_request_sequence(self):
        """Test request sequence"""
        print("\nüìã Test 2: Request Sequence")
        print("-" * 40)
        
        test_cccd = "037178000015"
        
        try:
            # Test single request
            result = self.module.check_cccd_standardized(test_cccd)
            
            # Validate result structure
            required_fields = ["cccd", "status", "message", "profiles", "timestamp", "request_id", "processing_time"]
            missing_fields = [field for field in required_fields if not hasattr(result, field)]
            
            if not missing_fields:
                print("‚úÖ Request Sequence Structure: PASS")
                print(f"   Request ID: {result.request_id}")
                print(f"   Status: {result.status.value}")
                print(f"   Processing Time: {result.processing_time:.2f}s")
                print(f"   Profiles Count: {len(result.profiles)}")
                
                self.test_results["request_sequence"] = {
                    "structure_valid": True,
                    "request_id": result.request_id,
                    "status": result.status.value,
                    "processing_time": result.processing_time,
                    "profiles_count": len(result.profiles),
                    "status": "PASS"
                }
            else:
                print(f"‚ùå Request Sequence Structure: FAIL - Missing fields: {missing_fields}")
                self.test_results["request_sequence"] = {
                    "structure_valid": False,
                    "missing_fields": missing_fields,
                    "status": "FAIL"
                }
                
        except Exception as e:
            print(f"‚ùå Request Sequence: ERROR - {str(e)}")
            self.test_results["request_sequence"] = {
                "error": str(e),
                "status": "FAIL"
            }
    
    def test_response_processing(self):
        """Test response processing"""
        print("\nüìã Test 3: Response Processing")
        print("-" * 40)
        
        test_cccd = "037178000015"
        
        try:
            result = self.module.check_cccd_standardized(test_cccd)
            
            # Test status handling
            valid_statuses = [RequestStatus.SUCCESS, RequestStatus.ERROR, RequestStatus.NOT_FOUND, 
                            RequestStatus.BLOCKED, RequestStatus.RATE_LIMITED]
            
            if result.status in valid_statuses:
                print("‚úÖ Status Handling: PASS")
                print(f"   Status: {result.status.value}")
            else:
                print(f"‚ùå Status Handling: FAIL - Invalid status: {result.status}")
            
            # Test profile data structure
            if result.profiles:
                profile = result.profiles[0]
                required_profile_fields = ["name", "tax_code", "url", "type"]
                missing_profile_fields = [field for field in required_profile_fields if not hasattr(profile, field)]
                
                if not missing_profile_fields:
                    print("‚úÖ Profile Data Structure: PASS")
                    print(f"   Name: {profile.name}")
                    print(f"   Tax Code: {profile.tax_code}")
                    print(f"   URL: {profile.url}")
                    print(f"   Type: {profile.type}")
                else:
                    print(f"‚ùå Profile Data Structure: FAIL - Missing fields: {missing_profile_fields}")
            else:
                print("‚ö†Ô∏è No profiles found (expected for fallback)")
            
            self.test_results["response_processing"] = {
                "status_valid": result.status in valid_statuses,
                "profiles_structure_valid": len(result.profiles) == 0 or all(
                    hasattr(p, field) for p in result.profiles for field in ["name", "tax_code", "url", "type"]
                ),
                "profiles_count": len(result.profiles),
                "status": "PASS"
            }
            
        except Exception as e:
            print(f"‚ùå Response Processing: ERROR - {str(e)}")
            self.test_results["response_processing"] = {
                "error": str(e),
                "status": "FAIL"
            }
    
    def test_output_validation(self):
        """Test output validation"""
        print("\nüìã Test 4: Output Validation")
        print("-" * 40)
        
        test_cccd = "037178000015"
        
        try:
            result = self.module.check_cccd_standardized(test_cccd)
            
            # Test JSON serialization
            try:
                json_str = json.dumps(result.__dict__, default=str, ensure_ascii=False)
                print("‚úÖ JSON Serialization: PASS")
                json_valid = True
            except Exception as e:
                print(f"‚ùå JSON Serialization: FAIL - {str(e)}")
                json_valid = False
            
            # Test timestamp format
            try:
                datetime.fromisoformat(result.timestamp.replace('Z', '+00:00'))
                print("‚úÖ Timestamp Format: PASS")
                timestamp_valid = True
            except Exception as e:
                print(f"‚ùå Timestamp Format: FAIL - {str(e)}")
                timestamp_valid = False
            
            # Test request ID format
            if result.request_id and result.request_id.startswith("REQ_"):
                print("‚úÖ Request ID Format: PASS")
                request_id_valid = True
            else:
                print(f"‚ùå Request ID Format: FAIL - Invalid format: {result.request_id}")
                request_id_valid = False
            
            self.test_results["output_validation"] = {
                "json_serializable": json_valid,
                "timestamp_valid": timestamp_valid,
                "request_id_valid": request_id_valid,
                "status": "PASS" if all([json_valid, timestamp_valid, request_id_valid]) else "FAIL"
            }
            
        except Exception as e:
            print(f"‚ùå Output Validation: ERROR - {str(e)}")
            self.test_results["output_validation"] = {
                "error": str(e),
                "status": "FAIL"
            }
    
    def test_error_handling(self):
        """Test error handling"""
        print("\nüìã Test 5: Error Handling")
        print("-" * 40)
        
        # Test invalid CCCD
        try:
            result = self.module.check_cccd_standardized("invalid_cccd")
            
            if result.status == RequestStatus.ERROR:
                print("‚úÖ Invalid CCCD Handling: PASS")
                print(f"   Error Message: {result.message}")
                invalid_cccd_handled = True
            else:
                print(f"‚ùå Invalid CCCD Handling: FAIL - Expected ERROR, got {result.status}")
                invalid_cccd_handled = False
                
        except Exception as e:
            print(f"‚ùå Invalid CCCD Handling: ERROR - {str(e)}")
            invalid_cccd_handled = False
        
        # Test empty CCCD
        try:
            result = self.module.check_cccd_standardized("")
            
            if result.status == RequestStatus.ERROR:
                print("‚úÖ Empty CCCD Handling: PASS")
                print(f"   Error Message: {result.message}")
                empty_cccd_handled = True
            else:
                print(f"‚ùå Empty CCCD Handling: FAIL - Expected ERROR, got {result.status}")
                empty_cccd_handled = False
                
        except Exception as e:
            print(f"‚ùå Empty CCCD Handling: ERROR - {str(e)}")
            empty_cccd_handled = False
        
        self.test_results["error_handling"] = {
            "invalid_cccd_handled": invalid_cccd_handled,
            "empty_cccd_handled": empty_cccd_handled,
            "status": "PASS" if all([invalid_cccd_handled, empty_cccd_handled]) else "FAIL"
        }
    
    def test_integration(self):
        """Test integration"""
        print("\nüìã Test 6: Integration Test")
        print("-" * 40)
        
        # Test batch processing
        test_cccds = ["037178000015", "invalid_cccd", "123456789012"]
        
        try:
            results = self.module.batch_check_standardized(test_cccds)
            
            if len(results) == len(test_cccds):
                print("‚úÖ Batch Processing: PASS")
                print(f"   Processed {len(results)} CCCDs")
                
                # Check each result
                for i, result in enumerate(results):
                    print(f"   Result {i+1}: {result.cccd} - {result.status.value}")
                
                batch_valid = True
            else:
                print(f"‚ùå Batch Processing: FAIL - Expected {len(test_cccds)}, got {len(results)}")
                batch_valid = False
            
            # Test save results
            try:
                self.module.save_results_standardized(results, "test_integration_output.txt")
                print("‚úÖ Save Results: PASS")
                save_valid = True
            except Exception as e:
                print(f"‚ùå Save Results: FAIL - {str(e)}")
                save_valid = False
            
            self.test_results["integration"] = {
                "batch_processing": batch_valid,
                "save_results": save_valid,
                "results_count": len(results),
                "status": "PASS" if all([batch_valid, save_valid]) else "FAIL"
            }
            
        except Exception as e:
            print(f"‚ùå Integration Test: ERROR - {str(e)}")
            self.test_results["integration"] = {
                "error": str(e),
                "status": "FAIL"
            }
    
    def calculate_overall_score(self):
        """T√≠nh ƒëi·ªÉm t·ªïng"""
        scores = []
        
        for test_name, test_result in self.test_results.items():
            if test_name == "overall_score":
                continue
            
            if "score" in test_result:
                scores.append(test_result["score"])
            elif test_result.get("status") == "PASS":
                scores.append(100)
            else:
                scores.append(0)
        
        if scores:
            overall_score = sum(scores) / len(scores)
        else:
            overall_score = 0
        
        self.test_results["overall_score"] = overall_score
    
    def print_test_results(self):
        """In k·∫øt qu·∫£ test"""
        print("\n" + "=" * 80)
        print("K·∫æT QU·∫¢ TEST TO√ÄN DI·ªÜN QUY TR√åNH CHU·∫®N H√ìA")
        print("=" * 80)
        
        for test_name, test_result in self.test_results.items():
            if test_name == "overall_score":
                continue
            
            print(f"\nüìä {test_name.upper().replace('_', ' ')}:")
            if "score" in test_result:
                print(f"   Score: {test_result['score']:.1f}%")
            print(f"   Status: {test_result.get('status', 'UNKNOWN')}")
            
            if "error" in test_result:
                print(f"   Error: {test_result['error']}")
        
        print(f"\nüéØ OVERALL SCORE: {self.test_results['overall_score']:.1f}%")
        
        if self.test_results['overall_score'] >= 90:
            print("‚úÖ QUY TR√åNH CHU·∫®N H√ìA: PASS - S·∫µn s√†ng production")
        elif self.test_results['overall_score'] >= 70:
            print("‚ö†Ô∏è QUY TR√åNH CHU·∫®N H√ìA: WARNING - C·∫ßn c·∫£i thi·ªán")
        else:
            print("‚ùå QUY TR√åNH CHU·∫®N H√ìA: FAIL - C·∫ßn s·ª≠a l·ªói")
        
        print("=" * 80)
    
    def save_test_results(self, filename: str = "test_results.json"):
        """L∆∞u k·∫øt qu·∫£ test"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, ensure_ascii=False, indent=2, default=str)
            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ test v√†o: {filename}")
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u k·∫øt qu·∫£ test: {str(e)}")


def main():
    """H√†m ch√≠nh"""
    print("üß™ TEST V√Ä VALIDATE TO√ÄN B·ªò QUY TR√åNH CHU·∫®N H√ìA T·ª∞ ƒê·ªòNG H√ìA")
    print("üéØ ƒê·∫£m b·∫£o kh·ªõp ch√≠nh x√°c 100% v·ªõi y√™u c·∫ßu m√°y ch·ªß m√£ s·ªë thu·∫ø")
    print("=" * 80)
    
    validator = WorkflowValidator()
    results = validator.run_comprehensive_tests()
    
    # L∆∞u k·∫øt qu·∫£
    validator.save_test_results()
    
    # K·∫øt lu·∫≠n
    if results['overall_score'] >= 90:
        print("\nüéâ K·∫æT LU·∫¨N: Quy tr√¨nh chu·∫©n h√≥a t·ª± ƒë·ªông h√≥a ƒë√£ s·∫µn s√†ng!")
        print("‚úÖ T·∫•t c·∫£ test cases ƒë·ªÅu PASS")
        print("‚úÖ Module ƒë·∫£m b·∫£o kh·ªõp ch√≠nh x√°c 100% v·ªõi y√™u c·∫ßu m√°y ch·ªß")
        print("‚úÖ S·∫µn s√†ng tri·ªÉn khai trong production")
    else:
        print("\n‚ö†Ô∏è K·∫æT LU·∫¨N: Quy tr√¨nh c·∫ßn ƒë∆∞·ª£c c·∫£i thi·ªán")
        print("‚ùå M·ªôt s·ªë test cases FAIL")
        print("‚ùå C·∫ßn s·ª≠a l·ªói tr∆∞·ªõc khi tri·ªÉn khai")


if __name__ == "__main__":
    main()
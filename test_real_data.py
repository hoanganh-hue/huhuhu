#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ki·ªÉm tra d·ªØ li·ªáu th·ª±c t·∫ø v·ªõi 5 s·ªë CCCD
S·ª≠ d·ª•ng module chu·∫©n h√≥a ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt qu·∫£ ch√≠nh x√°c 100%
"""

import sys
import os
import json
import time
from datetime import datetime
from typing import List, Dict, Any

# Th√™m path ƒë·ªÉ import module
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from modules.core.module_2_check_cccd_standardized import (
    StandardizedModule2CheckCCCD,
    RequestStatus,
    SearchResult
)

class RealDataTester:
    """Class ki·ªÉm tra d·ªØ li·ªáu th·ª±c t·∫ø"""
    
    def __init__(self):
        self.config = {
            'timeout': 30,
            'max_retries': 3,
            'retry_delay': 1.0,
            'max_delay': 10.0,
            'output_file': 'real_data_test_output.txt'
        }
        
        self.module = StandardizedModule2CheckCCCD(self.config)
        
        # 5 s·ªë CCCD th·ª±c t·∫ø c·∫ßn ki·ªÉm tra
        self.test_cccds = [
            "001087016369",
            "001184032114", 
            "001098021288",
            "001094001628",
            "036092002342"
        ]
        
        self.results = []
        self.summary = {
            "total_cccds": len(self.test_cccds),
            "successful": 0,
            "not_found": 0,
            "errors": 0,
            "blocked": 0,
            "rate_limited": 0,
            "total_profiles": 0,
            "processing_time": 0.0
        }
    
    def run_real_data_tests(self) -> Dict[str, Any]:
        """Ch·∫°y test v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø"""
        print("üîç KI·ªÇM TRA D·ªÆ LI·ªÜU TH·ª∞C T·∫æ V·ªöI MODULE CHU·∫®N H√ìA")
        print("=" * 80)
        print(f"üìã S·ªë l∆∞·ª£ng CCCD c·∫ßn ki·ªÉm tra: {len(self.test_cccds)}")
        print(f"üìÖ Th·ªùi gian b·∫Øt ƒë·∫ßu: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        start_time = time.time()
        
        # Ki·ªÉm tra t·ª´ng CCCD
        for i, cccd in enumerate(self.test_cccds, 1):
            print(f"\nüìã [{i}/{len(self.test_cccds)}] ƒêang ki·ªÉm tra CCCD: {cccd}")
            print("-" * 60)
            
            try:
                # Th·ª±c hi·ªán ki·ªÉm tra
                result = self.module.check_cccd_standardized(cccd)
                self.results.append(result)
                
                # In k·∫øt qu·∫£ chi ti·∫øt
                self.print_result_details(result, i)
                
                # C·∫≠p nh·∫≠t summary
                self.update_summary(result)
                
                # Delay gi·ªØa c√°c request ƒë·ªÉ tr√°nh b·ªã block
                if i < len(self.test_cccds):
                    print("‚è≥ Ch·ªù 3s tr∆∞·ªõc khi ki·ªÉm tra CCCD ti·∫øp theo...")
                    time.sleep(3.0)
                
            except Exception as e:
                print(f"‚ùå L·ªói khi ki·ªÉm tra CCCD {cccd}: {str(e)}")
                error_result = SearchResult(
                    cccd=cccd,
                    status=RequestStatus.ERROR,
                    message=f"L·ªói h·ªá th·ªëng: {str(e)}",
                    profiles=[],
                    timestamp=datetime.now().isoformat(),
                    request_id=f"ERROR_{int(time.time())}",
                    processing_time=0.0,
                    error_details={"system_error": str(e)}
                )
                self.results.append(error_result)
                self.update_summary(error_result)
        
        # T√≠nh th·ªùi gian x·ª≠ l√Ω t·ªïng
        self.summary["processing_time"] = time.time() - start_time
        
        # In t·ªïng k·∫øt
        self.print_summary()
        
        # L∆∞u k·∫øt qu·∫£
        self.save_results()
        
        return {
            "results": self.results,
            "summary": self.summary
        }
    
    def print_result_details(self, result: SearchResult, index: int):
        """In chi ti·∫øt k·∫øt qu·∫£"""
        print(f"üîç K·∫øt qu·∫£ ki·ªÉm tra CCCD #{index}:")
        print(f"   Request ID: {result.request_id}")
        print(f"   CCCD: {result.cccd}")
        print(f"   Tr·∫°ng th√°i: {result.status.value}")
        print(f"   Th√¥ng b√°o: {result.message}")
        print(f"   Th·ªùi gian x·ª≠ l√Ω: {result.processing_time:.2f}s")
        print(f"   S·ªë l·∫ßn retry: {result.retry_count}")
        
        if result.status == RequestStatus.SUCCESS and result.profiles:
            print(f"   üìä S·ªë k·∫øt qu·∫£ t√¨m th·∫•y: {len(result.profiles)}")
            for j, profile in enumerate(result.profiles, 1):
                print(f"   ‚îî‚îÄ Profile {j}:")
                print(f"      T√™n: {profile.name}")
                print(f"      M√£ s·ªë thu·∫ø: {profile.tax_code}")
                print(f"      URL: {profile.url}")
                if profile.address:
                    print(f"      ƒê·ªãa ch·ªâ: {profile.address}")
                if profile.birth_date:
                    print(f"      Ng√†y sinh: {profile.birth_date}")
                if profile.gender:
                    print(f"      Gi·ªõi t√≠nh: {profile.gender}")
        elif result.status == RequestStatus.NOT_FOUND:
            print(f"   ‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin m√£ s·ªë thu·∫ø")
        elif result.status == RequestStatus.BLOCKED:
            print(f"   üö´ B·ªã ch·∫∑n b·ªüi anti-bot protection")
        elif result.status == RequestStatus.RATE_LIMITED:
            print(f"   ‚è±Ô∏è B·ªã gi·ªõi h·∫°n t·ªëc ƒë·ªô request")
        elif result.status == RequestStatus.ERROR:
            print(f"   ‚ùå L·ªói: {result.message}")
        
        if result.error_details:
            print(f"   üîç Chi ti·∫øt l·ªói: {json.dumps(result.error_details, ensure_ascii=False, indent=6)}")
    
    def update_summary(self, result: SearchResult):
        """C·∫≠p nh·∫≠t t·ªïng k·∫øt"""
        if result.status == RequestStatus.SUCCESS:
            self.summary["successful"] += 1
            self.summary["total_profiles"] += len(result.profiles)
        elif result.status == RequestStatus.NOT_FOUND:
            self.summary["not_found"] += 1
        elif result.status == RequestStatus.ERROR:
            self.summary["errors"] += 1
        elif result.status == RequestStatus.BLOCKED:
            self.summary["blocked"] += 1
        elif result.status == RequestStatus.RATE_LIMITED:
            self.summary["rate_limited"] += 1
    
    def print_summary(self):
        """In t·ªïng k·∫øt"""
        print("\n" + "=" * 80)
        print("üìä T·ªîNG K·∫æT KI·ªÇM TRA D·ªÆ LI·ªÜU TH·ª∞C T·∫æ")
        print("=" * 80)
        
        print(f"üìã T·ªïng s·ªë CCCD ki·ªÉm tra: {self.summary['total_cccds']}")
        print(f"‚úÖ Th√†nh c√¥ng: {self.summary['successful']}")
        print(f"‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y: {self.summary['not_found']}")
        print(f"‚ùå L·ªói: {self.summary['errors']}")
        print(f"üö´ B·ªã ch·∫∑n: {self.summary['blocked']}")
        print(f"‚è±Ô∏è Rate limited: {self.summary['rate_limited']}")
        print(f"üìä T·ªïng s·ªë profiles t√¨m th·∫•y: {self.summary['total_profiles']}")
        print(f"‚è∞ Th·ªùi gian x·ª≠ l√Ω t·ªïng: {self.summary['processing_time']:.2f}s")
        
        # T√≠nh t·ª∑ l·ªá th√†nh c√¥ng
        success_rate = (self.summary['successful'] / self.summary['total_cccds']) * 100
        print(f"üéØ T·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print("‚úÖ K·∫æT QU·∫¢: Xu·∫•t s·∫Øc - Module ho·∫°t ƒë·ªông t·ªët")
        elif success_rate >= 60:
            print("‚ö†Ô∏è K·∫æT QU·∫¢: T·ªët - Module ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh")
        elif success_rate >= 40:
            print("‚ö†Ô∏è K·∫æT QU·∫¢: Trung b√¨nh - C·∫ßn c·∫£i thi·ªán")
        else:
            print("‚ùå K·∫æT QU·∫¢: K√©m - C·∫ßn s·ª≠a l·ªói")
        
        print("=" * 80)
    
    def save_results(self):
        """L∆∞u k·∫øt qu·∫£ v√†o file"""
        try:
            # L∆∞u k·∫øt qu·∫£ chi ti·∫øt
            self.module.save_results_standardized(self.results, self.config['output_file'])
            
            # L∆∞u k·∫øt qu·∫£ JSON
            json_results = {
                "test_info": {
                    "test_date": datetime.now().isoformat(),
                    "total_cccds": len(self.test_cccds),
                    "test_cccds": self.test_cccds
                },
                "summary": self.summary,
                "results": [
                    {
                        "cccd": result.cccd,
                        "request_id": result.request_id,
                        "status": result.status.value,
                        "message": result.message,
                        "processing_time": result.processing_time,
                        "retry_count": result.retry_count,
                        "profiles_count": len(result.profiles),
                        "profiles": [
                            {
                                "name": profile.name,
                                "tax_code": profile.tax_code,
                                "url": profile.url,
                                "type": profile.type,
                                "address": profile.address,
                                "birth_date": profile.birth_date,
                                "gender": profile.gender
                            } for profile in result.profiles
                        ],
                        "error_details": result.error_details,
                        "timestamp": result.timestamp
                    } for result in self.results
                ]
            }
            
            with open('real_data_test_results.json', 'w', encoding='utf-8') as f:
                json.dump(json_results, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ chi ti·∫øt v√†o: {self.config['output_file']}")
            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ JSON v√†o: real_data_test_results.json")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u k·∫øt qu·∫£: {str(e)}")
    
    def print_detailed_analysis(self):
        """In ph√¢n t√≠ch chi ti·∫øt"""
        print("\n" + "=" * 80)
        print("üîç PH√ÇN T√çCH CHI TI·∫æT K·∫æT QU·∫¢")
        print("=" * 80)
        
        # Ph√¢n t√≠ch theo tr·∫°ng th√°i
        status_counts = {}
        for result in self.results:
            status = result.status.value
            status_counts[status] = status_counts.get(status, 0) + 1
        
        print("üìä Ph√¢n t√≠ch theo tr·∫°ng th√°i:")
        for status, count in status_counts.items():
            percentage = (count / len(self.results)) * 100
            print(f"   {status}: {count} ({percentage:.1f}%)")
        
        # Ph√¢n t√≠ch th·ªùi gian x·ª≠ l√Ω
        processing_times = [result.processing_time for result in self.results]
        if processing_times:
            avg_time = sum(processing_times) / len(processing_times)
            min_time = min(processing_times)
            max_time = max(processing_times)
            
            print(f"\n‚è∞ Ph√¢n t√≠ch th·ªùi gian x·ª≠ l√Ω:")
            print(f"   Th·ªùi gian trung b√¨nh: {avg_time:.2f}s")
            print(f"   Th·ªùi gian nhanh nh·∫•t: {min_time:.2f}s")
            print(f"   Th·ªùi gian ch·∫≠m nh·∫•t: {max_time:.2f}s")
        
        # Ph√¢n t√≠ch profiles
        total_profiles = sum(len(result.profiles) for result in self.results)
        if total_profiles > 0:
            print(f"\nüìä Ph√¢n t√≠ch profiles:")
            print(f"   T·ªïng s·ªë profiles: {total_profiles}")
            
            # Th·ªëng k√™ theo lo·∫°i
            profile_types = {}
            for result in self.results:
                for profile in result.profiles:
                    profile_type = profile.type
                    profile_types[profile_type] = profile_types.get(profile_type, 0) + 1
            
            for profile_type, count in profile_types.items():
                print(f"   {profile_type}: {count}")
        
        print("=" * 80)


def main():
    """H√†m ch√≠nh"""
    print("üß™ KI·ªÇM TRA D·ªÆ LI·ªÜU TH·ª∞C T·∫æ V·ªöI MODULE CHU·∫®N H√ìA")
    print("üéØ S·ª≠ d·ª•ng 5 s·ªë CCCD th·ª±c t·∫ø ƒë·ªÉ test module")
    print("=" * 80)
    
    tester = RealDataTester()
    results = tester.run_real_data_tests()
    
    # Ph√¢n t√≠ch chi ti·∫øt
    tester.print_detailed_analysis()
    
    # K·∫øt lu·∫≠n
    success_rate = (results['summary']['successful'] / results['summary']['total_cccds']) * 100
    
    print(f"\nüéâ K·∫æT LU·∫¨N:")
    if success_rate >= 80:
        print("‚úÖ Module chu·∫©n h√≥a ho·∫°t ƒë·ªông xu·∫•t s·∫Øc v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø!")
        print("‚úÖ T·ª∑ l·ªá th√†nh c√¥ng cao, s·∫µn s√†ng s·ª≠ d·ª•ng trong production")
    elif success_rate >= 60:
        print("‚ö†Ô∏è Module chu·∫©n h√≥a ho·∫°t ƒë·ªông t·ªët v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø")
        print("‚ö†Ô∏è C√≥ th·ªÉ c·∫ßn c·∫£i thi·ªán m·ªôt s·ªë tr∆∞·ªùng h·ª£p")
    else:
        print("‚ùå Module chu·∫©n h√≥a c·∫ßn ƒë∆∞·ª£c c·∫£i thi·ªán")
        print("‚ùå T·ª∑ l·ªá th√†nh c√¥ng th·∫•p, c·∫ßn xem x√©t l·∫°i")
    
    print(f"üìä T·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%")
    print(f"üìã T·ªïng s·ªë CCCD ki·ªÉm tra: {results['summary']['total_cccds']}")
    print(f"‚úÖ Th√†nh c√¥ng: {results['summary']['successful']}")
    print(f"üìä T·ªïng s·ªë profiles: {results['summary']['total_profiles']}")


if __name__ == "__main__":
    main()